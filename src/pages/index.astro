---
import Layout from "../layouts/Layout.astro";

// New VS Code-style components
import MenuBar from "../components/MenuBar.astro";
import FileTree from "../components/FileTree.astro";
import TabBar from "../components/TabBar.astro";
import ContentEditor from "../components/ContentEditor.astro";
import InfoPanel from "../components/InfoPanel.astro";
import StatusBar from "../components/StatusBar.astro";

// Original components for mobile compatibility
import Profile from "../components/Profile.astro";
import Contact from "../components/Contact.astro";
import SearchModal from "../components/SearchModal.astro";

import Analytics from "@vercel/analytics/astro";
---

<Layout>
  <!-- VS Code Editor Layout -->
  <div class="vscode-layout h-screen w-screen flex flex-col bg-black fixed inset-0">
    <!-- MenuBar -->
    <div class="menubar-wrapper flex-shrink-0">
      <MenuBar />
    </div>
    
    <!-- Main Editor Area - CSS Grid Layout -->
    <div class="editor-main flex-1 grid min-h-0" style="grid-template-columns: 2fr 8fr;" id="editor-main-grid">
      <!-- File Tree (Left Sidebar) -->
      <div class="filetree-panel border-r border-gray-600 flex flex-col min-h-0">
        <FileTree />
      </div>
      
      <!-- Editor Content Area -->
      <div class="editor-area flex flex-col min-h-0">
        <!-- Tab Bar -->
        <div class="tabbar-container flex-shrink-0">
          <TabBar />
        </div>
        
        <!-- Content Editor -->
        <div class="content-wrapper flex-1 min-h-0">
          <ContentEditor />
        </div>
      </div>
      
      <!-- Info Panel (Right Sidebar) - Hidden by default -->
      <div id="info-panel-container" class="info-panel-container border-l border-gray-600 flex flex-col min-h-0" style="display: none;">
        <InfoPanel />
      </div>
    </div>
    
    <!-- Status Bar -->
    <div class="statusbar-wrapper flex-shrink-0">
      <StatusBar />
    </div>
  </div>
  
  <!-- Mobile Fallback: Original Layout -->
  <div class="mobile-layout md:hidden">
    <main class="flex flex-col w-full border border-gray-600 rounded-2xl overflow-hidden relative bg-black mb-12">
      <!-- Mobile Profile Section -->
      <div id="profile-section" class="p-6 flex flex-col justify-between w-full border-b border-gray-600 min-h-screen">
        <Profile />
        <Analytics />
        <Contact />
      </div>
      
      <!-- Mobile Content Section -->
      <div id="content-section" class="w-full p-0 flex flex-col mobile-content-section" style="display: none;">
        <div class="min-h-[50vh] flex flex-col">
          <div class="tab-controls flex flex-col h-full overflow-hidden">
            <input type="radio" id="mobile-tab1" name="mobile-tabs" class="tab-radio" checked />
            <input type="radio" id="mobile-tab2" name="mobile-tabs" class="tab-radio" />
            <input type="radio" id="mobile-tab3" name="mobile-tabs" class="tab-radio" />
            <input type="radio" id="mobile-tab4" name="mobile-tabs" class="tab-radio" />
            <input type="radio" id="mobile-tab5" name="mobile-tabs" class="tab-radio" />
            <input type="radio" id="mobile-tab6" name="mobile-tabs" class="tab-radio" />
            
            <div class="tab-content-wrapper flex-grow overflow-auto h-full">
              <div class="p-4 bg-black no-scrollbar tab-content-container">
                <ContentEditor />
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Mobile Navigation - Simplified bottom tab bar -->
  <div
    id="mobile-tab-bar"
    class="md:hidden fixed bottom-12 left-0 right-0 z-50 flex justify-center pointer-events-auto"
  >
    <div class="bg-gray-800 border border-gray-600 rounded-full flex justify-between px-2">
      <button id="mobile-home-btn" class="mobile-tab-btn p-2 rounded-full text-gray-400 active" title="Home">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
          <polyline points="9 22 9 12 15 12 15 22"></polyline>
        </svg>
      </button>
      <button class="mobile-tab-btn p-2 rounded-full text-gray-400" data-mobile-tab="mobile-tab1" title="About">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
      </button>
      <button class="mobile-tab-btn p-2 rounded-full text-gray-400" data-mobile-tab="mobile-tab2" title="Projects">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
        </svg>
      </button>
      <button class="mobile-tab-btn p-2 rounded-full text-gray-400" data-mobile-tab="mobile-tab6" title="Tutorials">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
          <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Global Search Modal -->
  <SearchModal />
  <Analytics />
</Layout>

<!-- End: Inner wrapper -->

<!-- End: Right / lower card -->

<!-- End: Main Wrapper -->

<!-- Credits -->
<div
  class="credits-bar fixed md:absolute bottom-0 left-0 right-0 w-full bg-black py-1 md:py-2 flex justify-between items-center px-4 z-20"
>
  <div class="text-center mx-auto text-xs md:text-sm">
    Built with <a
      href="https://astro.build"
      title="Astro"
      target="_blank"
      class="text-primary hover:underline">Astro.js</a
    > by <a
      href="https://github.com/UtsavBalar1231"
      target="_blank"
      title="Utsav Balar"
      class="text-primary hover:underline">Utsav Balar</a
    >
  </div>

  <!-- Vim help removed - no functionality was attached -->
</div>

<!-- Vim help panel removed - no JavaScript handlers existed -->

<script>
  // URL routing configuration
  const routeMap = {
    '#profile': 'tab1',
    '#about': 'tab2', 
    '#intro': 'tab2',
    '#projects': 'tab3',
    '#resume': 'tab4',
    '#quotes': 'tab5',
    '#book-bits': 'tab6',
    '#bookbits': 'tab6',
    '#tutorials': 'tab7'
  };

  const tabToRoute = {
    'tab1': '#profile',
    'tab2': '#about',
    'tab3': '#projects', 
    'tab4': '#resume',
    'tab5': '#quotes',
    'tab6': '#book-bits',
    'tab7': '#tutorials'
  };

  // Initialize fuzzy search
  let fuzzySearcher: any = null;
  
  async function initializeFuzzySearch() {
    try {
      const { globalSearcher } = await import('../data/searchIndex');
      fuzzySearcher = globalSearcher;
      
      // Make search available globally
      (window as any).fuzzySearch = (query: string, limit: number = 10) => {
        return fuzzySearcher.search(query, limit);
      };
    } catch (error) {
      console.warn('Failed to initialize fuzzy search:', error);
    }
  }

  // VS Code Editor Layout Management
  document.addEventListener("DOMContentLoaded", () => {
    // Initialize fuzzy search
    initializeFuzzySearch();
    const isMobile = window.innerWidth < 768;
    
    // Show appropriate layout
    if (isMobile) {
      document.querySelector('.vscode-layout')?.classList.add('hidden');
      document.querySelector('.mobile-layout')?.classList.remove('md:hidden');
      setupMobileNavigation();
    } else {
      document.querySelector('.mobile-layout')?.classList.add('hidden');
      document.querySelector('.vscode-layout')?.classList.remove('hidden');
      
      // Handle initial route from URL hash
      handleInitialRoute();
    }

    // Window resize handling removed - was causing unnecessary reloads

    // Right panel toggle functionality with animations
    function toggleRightPanel() {
      const editorMain = document.querySelector('.editor-main') as HTMLElement;
      const infoPanelContainer = document.getElementById('info-panel-container') as HTMLElement;
      
      if (editorMain && infoPanelContainer) {
        const isVisible = infoPanelContainer.style.display !== 'none';
        
        // Add transition classes
        editorMain.classList.add('panel-transition');
        infoPanelContainer.classList.add('panel-transition');
        
        if (isVisible) {
          // Hide right panel with animation
          infoPanelContainer.classList.add('panel-hiding');
          
          // First, animate the width to 0
          infoPanelContainer.style.width = '0px';
          infoPanelContainer.style.minWidth = '0px';
          infoPanelContainer.style.opacity = '0';
          
          // Then change grid layout and hide completely
          setTimeout(() => {
            infoPanelContainer.style.display = 'none';
            editorMain.style.gridTemplateColumns = '2fr 8fr';
            infoPanelContainer.classList.remove('panel-hiding');
          }, 200);
        } else {
          // Show right panel with animation
          infoPanelContainer.style.display = 'block';
          infoPanelContainer.style.width = '0px';
          infoPanelContainer.style.minWidth = '0px';
          infoPanelContainer.style.opacity = '0';
          
          // Change grid layout immediately
          editorMain.style.gridTemplateColumns = '2fr 6fr 2fr';
          
          // Then animate the panel in
          requestAnimationFrame(() => {
            infoPanelContainer.style.width = '320px';
            infoPanelContainer.style.minWidth = '320px';
            infoPanelContainer.style.opacity = '1';
          });
        }
        
        // Remove transition classes after animation
        setTimeout(() => {
          editorMain.classList.remove('panel-transition');
          infoPanelContainer.classList.remove('panel-transition');
        }, 250);
      }
    }

    // Expose toggle function globally
    (window as any).toggleRightPanel = toggleRightPanel;

    // URL routing functions
    function handleInitialRoute() {
      const hash = window.location.hash;
      const targetTab = routeMap[hash];
      
      if (targetTab) {
        // Route found, open the specific tab
        setTimeout(() => {
          openTab(targetTab);
        }, 100);
      } else {
        // No route or invalid route, open default tab
        setTimeout(() => {
          openTab('tab1');
          // Update URL to reflect default tab
          updateURL('tab1');
        }, 100);
      }
    }

    function openTab(tabId: string) {
      const tab = document.getElementById(tabId) as HTMLInputElement;
      if (tab) {
        tab.checked = true;
        tab.dispatchEvent(new Event('change'));
        
        // Update file tree selection
        const fileSelectors = {
          'tab1': '[data-file="about"]',
          'tab2': '[data-file="projects"]', 
          'tab3': '[data-file="resume"]',
          'tab4': '[data-file="quotes"]',
          'tab5': '[data-file="bookbits"]',
          'tab6': '[data-file="tutorials"]'
        };
        
        // Clear previous selections
        document.querySelectorAll('.file-active').forEach(el => el.classList.remove('file-active'));
        
        // Add selection to current file
        const fileSelector = fileSelectors[tabId];
        if (fileSelector) {
          const fileElement = document.querySelector(fileSelector);
          if (fileElement) {
            fileElement.classList.add('file-active');
          }
        }
      }
    }

    function updateURL(tabId: string) {
      const route = tabToRoute[tabId];
      if (route && window.location.hash !== route) {
        window.history.pushState(null, '', route);
      }
    }

    // Listen for browser back/forward navigation
    window.addEventListener('hashchange', () => {
      const hash = window.location.hash;
      const targetTab = routeMap[hash];
      if (targetTab) {
        openTab(targetTab);
      }
    });

    // Listen for tab changes to update URL
    document.querySelectorAll('.tab-radio').forEach((radio) => {
      radio.addEventListener('change', (e) => {
        const tabId = (e.target as HTMLInputElement).id;
        updateURL(tabId);
      });
    });

    function setupMobileNavigation() {
      const profileSection = document.getElementById("profile-section");
      const contentSection = document.getElementById("content-section");
      const mobileTabBtns = document.querySelectorAll(".mobile-tab-btn");
      const homeBtn = document.getElementById("mobile-home-btn");

      // Initially show profile section
      if (profileSection) profileSection.style.display = "flex";
      if (contentSection) contentSection.style.display = "none";

      // Home button handler
      homeBtn?.addEventListener("click", () => {
        if (profileSection) profileSection.style.display = "flex";
        if (contentSection) contentSection.style.display = "none";
        
        // Update button states
        mobileTabBtns.forEach(btn => btn.classList.remove("active"));
        homeBtn.classList.add("active");
      });

      // Content tab handlers
      mobileTabBtns.forEach(btn => {
        const tabId = btn.getAttribute("data-mobile-tab");
        if (tabId) {
          btn.addEventListener("click", () => {
            if (profileSection) profileSection.style.display = "none";
            if (contentSection) contentSection.style.display = "flex";
            
            // Use URL routing instead of direct tab manipulation
            const mobileTabToRoute = {
              'mobile-tab1': '#about',
              'mobile-tab2': '#projects',
              'mobile-tab3': '#resume', 
              'mobile-tab4': '#quotes',
              'mobile-tab5': '#book-bits',
              'mobile-tab6': '#tutorials'
            };
            
            const route = mobileTabToRoute[tabId];
            if (route) {
              window.location.hash = route;
            }
            
            // Update button states
            mobileTabBtns.forEach(b => b.classList.remove("active"));
            btn.classList.add("active");
          });
        }
      });
    }
  });
</script>

<style is:global>
  /* VS Code Editor Layout Styles */
  .vscode-layout {
    background: var(--color-bg-primary);
    color: var(--color-text-primary);
    font-family: 'AdwaitaMono', monospace;
    overflow: hidden; /* Prevent any scrolling */
    display: flex;
    flex-direction: column;
    height: 100vh;
  }

  .editor-main {
    grid-template-rows: 1fr;
    overflow: hidden;
  }

  .editor-area {
    overflow: hidden;
  }

  .filetree-panel {
    overflow: hidden;
  }

  .content-wrapper {
    overflow: hidden;
  }

  .info-panel-container {
    overflow: hidden;
  }

  /* Ensure no body scrolling */
  body {
    overflow: hidden !important;
    height: 100vh;
    margin: 0;
    padding: 0;
  }

  html {
    overflow: hidden !important;
    height: 100vh;
  }

  /* Mobile tab button styling */
  .mobile-tab-btn {
    transition: all 0.2s ease-in-out;
    padding: 0.5rem;
  }

  .mobile-tab-btn.active {
    color: var(--color-accent-primary);
    background-color: rgba(var(--color-accent-primary-rgb, 59, 130, 246), 0.2);
    transform: translateY(-2px);
  }

  /* Mobile layout adjustments */
  @media (max-width: 767px) {
    .mobile-layout main {
      border-radius: 0;
      border-width: 0;
      margin-bottom: 0;
    }

    #mobile-tab-bar {
      z-index: 50;
      position: fixed;
      bottom: 3rem;
    }

    .tab-content-container {
      padding-bottom: 120px;
    }

    .credits-bar {
      height: 32px;
      font-size: 0.7rem;
    }

    /* iOS safe area support */
    @supports (padding: max(0px)) {
      .tab-content-container {
        padding-bottom: max(120px, 120px + env(safe-area-inset-bottom));
      }
      
      #mobile-tab-bar {
        bottom: max(3rem, 3rem + env(safe-area-inset-bottom) / 2);
      }
    }

    #profile-section {
      padding-bottom: 100px;
    }

    /* Vim help elements removed */
  }

  /* Help panel styles removed - functionality unused */

  /* Tutorial styles */
  .tutorials-section {
    position: relative;
    width: 100%;
  }
  
  .tutorials-list {
    transition: opacity 0.3s ease-in-out;
    width: 100%;
    display: block;
  }
  
  .tutorials-list.hidden-list {
    display: none;
  }
  
  .tutorial-detail {
    width: 100%;
  }
  
  .tutorial-content {
    padding-top: 1rem;
  }
  
  .tutorial-content.hidden {
    display: none;
  }
  
  .back-to-tutorials, .back-to-tutorials-top {
    cursor: pointer;
    display: flex;
    align-items: center;
    margin-top: 1rem;
  }
  
  .back-to-tutorials-top {
    margin-bottom: 1.5rem;
  }

  /* Scrollbar styles */
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
    overscroll-behavior: none;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
  }

  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  /* Panel animation styles */
  .panel-transition {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .panel-hiding {
    overflow: hidden;
  }

  .info-panel-container {
    transition: width 0.2s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                min-width 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    width: 320px;
    min-width: 320px;
  }

  .editor-main {
    transition: grid-template-columns 0.15s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* VS Code specific theme overrides */
  [data-theme="vscode-dark"] .vscode-layout {
    background: var(--color-editor-bg);
  }

  [data-theme="vscode-dark"] .mobile-tab-btn.active {
    background-color: var(--color-selection-bg);
  }
</style>
