---
// TabBar component - VS Code style file tabs
---

<div class="tabbar  border-b themed-border flex items-stretch overflow-x-auto">
  <!-- Tab for About -->
  <div class="tab-item active" data-tab="tab1" data-file="intro.md">
    <div class="tab-content flex items-center gap-2 px-3 py-2 cursor-pointer border-r themed-border hover-item transition-colors">
      <svg class="file-icon w-4 h-4 file-icon-markdown" viewBox="0 0 16 16" fill="currentColor">
        <path d="M3.75 2h8.5a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-8.5a.75.75 0 0 1-.75-.75V2.75A.75.75 0 0 1 3.75 2zM5 4.5v7h6v-7H5z"/>
      </svg>
      <span class="tab-name text-sm primary-text">intro.md</span>
      <button class="tab-close w-4 h-4 flex items-center justify-center rounded hover-item-close opacity-0 group-hover:opacity-100 transition-opacity ml-1" data-tab-close="tab1">
        <svg width="10" height="10" viewBox="0 0 16 16" fill="currentColor">
          <path d="M12.854 4.854a.5.5 0 0 0-.708-.708L8 8.293 4.854 5.146a.5.5 0 1 0-.708.708L7.293 9l-3.147 3.146a.5.5 0 0 0 .708.708L8 9.707l3.146 3.147a.5.5 0 0 0 .708-.708L8.707 9l3.147-3.146z"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- Dynamic tabs will be added here -->
  <div id="dynamic-tabs-container" class="flex"></div>

  <!-- New tab button -->
  <button class="new-tab-btn flex items-center justify-center w-8 h-8 hover-item hover-grow click-feedback transition-colors" title="New Tab">
    <svg width="12" height="12" viewBox="0 0 16 16" fill="currentColor" class="secondary-text">
      <path d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2z"/>
    </svg>
  </button>
</div>

<script>
  // Tab management system
  class TabManager {
    private openTabs: Map<string, {id: string, name: string, icon: string}> = new Map();
    private activeTab: string = 'tab1';

    constructor() {
      this.init();
    }

    init() {
      // Initialize with the default about tab
      this.openTabs.set('tab1', {
        id: 'tab1',
        name: 'intro.md',
        icon: 'markdown'
      });

      this.bindEvents();
      this.updateActiveTab('tab1');
    }

    bindEvents() {
      // Tab click handlers
      document.addEventListener('click', (e) => {
        const tabItem = (e.target as HTMLElement).closest('.tab-item');
        if (tabItem) {
          const tabId = tabItem.getAttribute('data-tab');
          if (tabId) {
            this.switchToTab(tabId);
          }
        }
      });

      // Tab close handlers
      document.addEventListener('click', (e) => {
        const closeBtn = (e.target as HTMLElement).closest('.tab-close');
        if (closeBtn) {
          e.stopPropagation();
          const tabId = closeBtn.getAttribute('data-tab-close');
          if (tabId) {
            this.closeTab(tabId);
          }
        }
      });

      // Listen for file tree clicks to open new tabs
      document.addEventListener('click', (e) => {
        const fileItem = (e.target as HTMLElement).closest('.file-item');
        if (fileItem) {
          const tabId = fileItem.getAttribute('data-tab');
          const fileName = fileItem.querySelector('span')?.textContent || 'untitled';
          if (tabId) {
            this.openTab(tabId, fileName);
          }
        }
      });

      // New tab button handler - open search modal
      document.addEventListener('click', (e) => {
        const newTabBtn = (e.target as HTMLElement).closest('.new-tab-btn');
        if (newTabBtn) {
          e.preventDefault();
          // Show search modal (function exposed by SearchModal component)
          if (typeof (window as any).showSearchModal === 'function') {
            (window as any).showSearchModal();
          }
        }
      });
    }

    openTab(tabId: string, fileName: string) {
      if (!this.openTabs.has(tabId)) {
        // Create new tab
        const iconClass = this.getFileIcon(fileName);
        this.openTabs.set(tabId, {
          id: tabId,
          name: fileName,
          icon: iconClass
        });
        this.renderTabs();
      }
      this.switchToTab(tabId);
    }

    closeTab(tabId: string) {
      if (this.openTabs.size <= 1) return; // Keep at least one tab
      
      this.openTabs.delete(tabId);
      
      // If we closed the active tab, switch to another one
      if (this.activeTab === tabId) {
        const remainingTabs = Array.from(this.openTabs.keys());
        this.switchToTab(remainingTabs[0]);
      }
      
      this.renderTabs();
    }

    switchToTab(tabId: string) {
      this.activeTab = tabId;
      this.updateActiveTab(tabId);
      
      // Trigger the original radio button system
      const radioButton = document.getElementById(tabId) as HTMLInputElement;
      if (radioButton) {
        radioButton.checked = true;
        radioButton.dispatchEvent(new Event('change'));
      }
    }

    updateActiveTab(tabId: string) {
      // Update visual state
      document.querySelectorAll('.tab-item').forEach(tab => {
        tab.classList.remove('active');
      });
      
      const activeTabElement = document.querySelector(`[data-tab="${tabId}"]`);
      if (activeTabElement) {
        activeTabElement.classList.add('active');
      }
    }

    renderTabs() {
      const container = document.getElementById('dynamic-tabs-container');
      if (!container) return;

      // Clear existing dynamic tabs
      container.innerHTML = '';

      // Render all tabs except the first one (which is static)
      Array.from(this.openTabs.entries()).slice(1).forEach(([tabId, tabData]) => {
        const tabElement = this.createTabElement(tabData);
        container.appendChild(tabElement);
      });
    }

    createTabElement(tabData: {id: string, name: string, icon: string}) {
      const tabDiv = document.createElement('div');
      tabDiv.className = 'tab-item group';
      tabDiv.setAttribute('data-tab', tabData.id);
      tabDiv.setAttribute('data-file', tabData.name);

      const iconSvg = this.getIconSvg(tabData.icon);
      
      tabDiv.innerHTML = `
        <div class="tab-content flex items-center gap-2 px-3 py-2 cursor-pointer border-r themed-border hover-item transition-colors">
          ${iconSvg}
          <span class="tab-name text-sm primary-text">${tabData.name}</span>
          <button class="tab-close w-4 h-4 flex items-center justify-center rounded hover-item-close opacity-0 group-hover:opacity-100 transition-opacity ml-1" data-tab-close="${tabData.id}">
            <svg width="10" height="10" viewBox="0 0 16 16" fill="currentColor">
              <path d="M12.854 4.854a.5.5 0 0 0-.708-.708L8 8.293 4.854 5.146a.5.5 0 1 0-.708.708L7.293 9l-3.147 3.146a.5.5 0 0 0 .708.708L8 9.707l3.146 3.147a.5.5 0 0 0 .708-.708L8.707 9l3.147-3.146z"/>
            </svg>
          </button>
        </div>
      `;

      return tabDiv;
    }

    getFileIcon(fileName: string): string {
      const ext = fileName.split('.').pop()?.toLowerCase();
      switch (ext) {
        case 'md': return 'markdown';
        case 'js': case 'ts': return 'javascript';
        case 'astro': return 'astro';
        case 'json': return 'json';
        case 'pdf': return 'pdf';
        default: return 'file';
      }
    }

    getIconSvg(iconType: string): string {
      const icons = {
        markdown: '<svg class="file-icon w-4 h-4 file-icon-markdown" viewBox="0 0 16 16" fill="currentColor"><path d="M3.75 2h8.5a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-8.5a.75.75 0 0 1-.75-.75V2.75A.75.75 0 0 1 3.75 2zM5 4.5v7h6v-7H5z"/></svg>',
        javascript: '<svg class="file-icon w-4 h-4 text-yellow-400" viewBox="0 0 16 16" fill="currentColor"><path d="M1 1v14h14V1H1zm13 13H2V2h12v12z"/></svg>',
        pdf: '<svg class="file-icon w-4 h-4 text-red-400" viewBox="0 0 16 16" fill="currentColor"><path d="M14 4.5V11h-1V4.5h-2A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v9H2V2a2 2 0 0 1 2-2h5.5L14 4.5z"/></svg>',
        file: '<svg class="file-icon w-4 h-4 text-gray-400" viewBox="0 0 16 16" fill="currentColor"><path d="M3.75 2h8.5a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-8.5a.75.75 0 0 1-.75-.75V2.75A.75.75 0 0 1 3.75 2z"/></svg>'
      };
      return icons[iconType as keyof typeof icons] || icons.file;
    }
  }

  // Initialize tab manager when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new TabManager();
  });
</script>

<style>
  .tabbar {
    background: var(--color-tab-bg, var(--color-bg-secondary));
    min-height: 35px;
  }

  .tab-item {
    position: relative;
    background: var(--color-tab-bg, var(--color-bg-secondary));
  }

  .tab-item.active {
    background: var(--color-tab-active-bg, var(--color-bg-primary));
  }

  .tab-item.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: var(--color-accent-primary);
  }

  .tab-close {
    transition: opacity 0.2s ease;
  }

  .tab-item:hover .tab-close {
    opacity: 1 !important;
  }

  .new-tab-btn {
    border-left: 1px solid var(--color-border);
  }

  /* VS Code specific styling */
  [data-theme="vscode-dark"] .tabbar {
    background: var(--color-tab-bg);
  }

  [data-theme="vscode-dark"] .tab-item {
    background: var(--color-tab-bg);
    border-color: var(--color-tab-border);
  }

  [data-theme="vscode-dark"] .tab-item.active {
    background: var(--color-tab-active-bg);
  }

  /* Scrollable tabs */
  .tabbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .tabbar::-webkit-scrollbar {
    display: none;
  }

  /* Theme-aware classes */
  .themed-border {
    border-color: var(--color-border);
  }

  .primary-text {
    color: var(--color-text-primary);
  }

  .secondary-text {
    color: var(--color-text-secondary);
  }

  .hover-item:hover {
    background-color: var(--color-selection-bg, rgba(255, 255, 255, 0.1));
  }

  .hover-item-close:hover {
    background-color: var(--color-error, #ef4444);
    color: white;
  }

  .file-icon-markdown {
    color: var(--color-info, #06b6d4);
  }

  .file-icon-pdf {
    color: var(--color-error, #ef4444);
  }
</style>