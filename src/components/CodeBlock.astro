---
interface Props {
  language?: string;
  title?: string;
  highlightLines?: string;
  isKernel?: boolean;
  isTerminal?: boolean;
  showLanguage?: boolean;
  showCursor?: boolean;
}

const {
  language = "javascript",
  title,
  isKernel = false,
  isTerminal = false,
  showLanguage,
  showCursor,
} = Astro.props;

const shouldShowLanguage = showLanguage ?? !isTerminal;
const shouldShowCursor = showCursor ?? isTerminal;

const displayTitle = isTerminal ? title || "Terminal" : title;

const isKernelCode =
  !isTerminal &&
  (isKernel ||
    language === "c" ||
    (title &&
      (title.toLowerCase().includes("kernel") ||
        title.toLowerCase().includes("driver") ||
        title.toLowerCase().includes("module"))));

const langMap: Record<string, string> = {
  js: "JavaScript",
  ts: "TypeScript",
  jsx: "React JSX",
  tsx: "React TSX",
  html: "HTML",
  css: "CSS",
  scss: "SCSS",
  json: "JSON",
  md: "Markdown",
  mdx: "MDX",
  bash: "Bash",
  sh: "Shell",
  rust: "Rust",
  c: "C",
  cpp: "C++",
  py: "Python",
  rb: "Ruby",
  go: "Go",
  java: "Java",
  php: "PHP",
  swift: "Swift",
  kotlin: "Kotlin",
};

const displayLanguage = langMap[language] || language.toUpperCase();
---

<div
  class:list={[
    "group my-6 overflow-hidden rounded-md border border-gray-600 transition-all duration-200 ease-in-out",
    isTerminal
      ? "shadow-crt hover:-translate-y-px hover:shadow-crt-hover"
      : "relative bg-gray-800 duration-300 hover:shadow-terminal-glow",
  ]}
  data-language={language}
  data-mode={isTerminal ? "terminal" : "code"}
>
  <div
    class:list={[
      "flex items-center justify-between border-b border-gray-600 px-4",
      isTerminal
        ? "bg-[color-mix(in_srgb,var(--bg-secondary)_90%,var(--bg-primary))] py-3 font-ui-interactive"
        : "bg-black py-3 font-ui-interactive",
    ]}
  >
    <div class="flex items-center gap-3">
      {
        isTerminal ? (
          <div class="flex items-center">
            <span class="mr-2 text-term-bright-green font-ui-prompt">$</span>
            <span class="text-term-bright-cyan font-ui-interactive">{displayTitle}</span>
          </div>
        ) : (
          <>
            {displayTitle && (
              <span class="font-semibold text-text-primary font-ui-interactive">
                {displayTitle}
              </span>
            )}
            {shouldShowLanguage && (
              <span class="text-sm text-term-bright-blue opacity-80 font-ui-badge">
                {displayLanguage}
              </span>
            )}
            {isKernelCode && (
              <span class="animate-pulse-soft rounded bg-term-bright-red px-2 py-0.5 font-bold text-term-black font-ui-badge hover:animate-none hover:bg-term-bright-yellow">
                KERNEL
              </span>
            )}
          </>
        )
      }
    </div>
    {
      (
        <button
          class="copy-button flex items-center gap-1 rounded border border-gray-600 px-2 py-1 text-sm text-text-secondary transition-all duration-200 hover:border-primary hover:text-black active:scale-95"
          aria-label="Copy code"
          title="Copy to clipboard"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
          </svg>
        </button>
      )
    }
  </div>
  <div
    class:list={[
      "overflow-x-auto [-webkit-overflow-scrolling:touch]",
      isTerminal
        ? "code-content bg-[color-mix(in_srgb,var(--bg-primary)_95%,black)] p-2 font-mono text-sm text-text-primary"
        : "code-content bg-gray-800 p-2 sm:p-3 sm:text-[0.8rem] md:p-4",
      shouldShowCursor && "with-cursor",
    ]}
  >
    <pre
      class:list={[
        "m-0 overflow-x-auto whitespace-pre bg-transparent font-mono leading-relaxed",
        isTerminal ? "" : "text-[0.9rem] sm:text-[0.8rem]",
      ]}><code class="text-text-primary bg-transparent p-0 font-mono block min-w-max"><slot /></code></pre>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const copyButtons = document.querySelectorAll(".copy-button");

    copyButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const container = button.closest("[data-mode]");
        if (!container) return;

        const codeContent = container.querySelector("code");
        if (!codeContent) return;

        const text = codeContent.textContent || "";

        try {
          await navigator.clipboard.writeText(text);

          button.classList.add("copied");
          const originalTitle = button.getAttribute("title");
          button.setAttribute("title", "Copied!");

          setTimeout(() => {
            button.classList.remove("copied");
            button.setAttribute("title", originalTitle || "Copy to clipboard");
          }, 2000);
        } catch (err) {
          console.error("Failed to copy:", err);
        }
      });
    });
  });
</script>

<style>
  /* Copy button glassmorphism styles */
  .copy-button {
    background: rgba(var(--bg-color-rgb), 0.06);
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);
    box-shadow:
      0 1px 4px rgba(0, 0, 0, 0.05),
      inset 0 1px 0 rgba(255, 255, 255, 0.02);
  }

  .copy-button:hover {
    background: rgba(var(--accent-primary-rgb), 0.9) !important;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow:
      0 0 8px rgba(var(--accent-primary-rgb), 0.3),
      0 2px 6px rgba(0, 0, 0, 0.08),
      inset 0 1px 0 rgba(255, 255, 255, 0.04);
  }

  /* Button state styles that can't be done with Tailwind inline */
  .copy-button.copied {
    @apply border-success bg-success text-black;
  }

  .copy-button svg {
    @apply h-4 w-4;
  }

  /* Scrollbar styling for code blocks */
  .code-content::-webkit-scrollbar,
  .terminal-content::-webkit-scrollbar {
    @apply h-2;
  }

  .code-content::-webkit-scrollbar-track {
    @apply bg-gray-800;
  }

  .terminal-content::-webkit-scrollbar-track {
    @apply bg-transparent;
  }

  .code-content::-webkit-scrollbar-thumb,
  .terminal-content::-webkit-scrollbar-thumb {
    @apply rounded bg-gray-600;
  }

  .code-content::-webkit-scrollbar-thumb:hover,
  .terminal-content::-webkit-scrollbar-thumb:hover {
    @apply bg-primary;
  }

  /* Line highlighting (if needed) */
  .highlight-line {
    @apply -mx-4 block bg-white/10 px-4;
  }

  /* Terminal-specific styles */
  .terminal-content {
    line-height: 1.5;
  }

  .terminal-content :global(pre) {
    @apply m-0 overflow-x-auto whitespace-pre !bg-transparent p-0;
    word-wrap: normal;
  }

  .terminal-content :global(code) {
    @apply block min-w-max font-mono;
    tab-size: 2;
  }

  /* Mobile-specific styles for terminal */
  @media (max-width: 768px) {
    .terminal-content {
      @apply p-3 text-xs;
    }

    .terminal-content :global(code) {
      @apply text-xs;
    }
  }

  /* Styling for command lines in terminal */
  .terminal-content :global(pre code span.line:has(span:first-child:is(.comment))) {
    @apply text-text-secondary;
  }

  /* Styling for terminal lines */
  .terminal-content :global(pre code span.line) {
    @apply relative inline-block w-full;
  }

  /* Add cursor animation to last line in terminal mode */
  .terminal-content.with-cursor :global(pre code span.line:last-child)::after {
    content: "";
    @apply relative ml-1 inline-block h-[1.5em] w-[0.5em] opacity-80;
    background-color: var(--term-bright-green);
    animation: cursor-blink 1.2s infinite;
    vertical-align: text-bottom;
  }

  @keyframes cursor-blink {
    0%,
    49% {
      opacity: 0;
    }
    50%,
    100% {
      opacity: 0.8;
    }
  }
</style>
