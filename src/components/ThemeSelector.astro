---
import { themes } from "../data/themes";
---

<div class="theme-selector">
  <button
    id="theme-selector-btn"
    class="theme-selector-btn"
    aria-label="Select theme"
    aria-expanded="false"
    aria-controls="theme-selector-dropdown"
  >
    <span class="theme-label">Theme:</span>
    <span class="current-theme" id="current-theme-display">Green Phosphor</span>
    <svg
      class="dropdown-icon"
      width="12"
      height="12"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      aria-hidden="true"
    >
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  </button>

  <div
    id="theme-selector-dropdown"
    class="theme-dropdown hidden"
    role="menu"
    aria-labelledby="theme-selector-btn"
  >
    {
      themes.map((theme) => (
        <button
          class="theme-option"
          data-theme={theme.value}
          data-theme-label={theme.label}
          role="menuitem"
          aria-label={`Switch to ${theme.label} theme`}
        >
          <span class="theme-indicator" aria-hidden="true" />
          <span class="theme-name">{theme.label}</span>
        </button>
      ))
    }
  </div>
</div>

<style>
  .hidden {
    display: none !important;
  }

  .theme-selector {
    position: relative;
    z-index: 45; /* Above mobile nav but below dropdowns */
  }

  .theme-selector-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-family: "AdwaitaMono", monospace;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .theme-selector-btn:hover {
    background-color: var(--bg-secondary);
    border-color: var(--accent-primary);
  }

  .theme-label {
    color: var(--text-secondary);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .current-theme {
    color: var(--accent-primary);
    font-weight: 600;
  }

  .dropdown-icon {
    transition: transform 0.2s ease;
  }

  .theme-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    min-width: 200px;
    max-width: calc(100vw - 2rem);
    background-color: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 0.25rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    z-index: 50; /* Highest z-index for dropdown */
    max-height: calc(100vh - 100px);
    overflow-y: auto;
  }

  .theme-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.75rem 1rem;
    background: transparent;
    color: var(--text-primary);
    border: none;
    font-size: 0.875rem;
    font-family: "AdwaitaMono", monospace;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .theme-option:hover {
    background-color: var(--bg-secondary);
  }

  .theme-indicator {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid var(--border-color);
    position: relative;
  }

  .theme-name {
    flex: 1;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .theme-selector-btn {
      padding: 0.375rem 0.5rem;
      font-size: 0.75rem;
      gap: 0.25rem;
    }

    .theme-label {
      display: none;
    }

    .theme-dropdown {
      min-width: 160px;
      right: 0;
      max-width: calc(100vw - 1rem);
      max-height: calc(100vh - 80px);
    }

    .theme-option {
      padding: 0.625rem 0.75rem;
      font-size: 0.8125rem;
    }

    .dropdown-icon {
      width: 10px;
      height: 10px;
    }
  }

  /* Small mobile screens */
  @media (max-width: 375px) {
    .theme-selector-btn {
      padding: 0.25rem 0.375rem;
      font-size: 0.7rem;
    }

    .current-theme {
      max-width: 100px;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeSelector = document.getElementById("theme-selector-btn");
    const themeDropdown = document.getElementById("theme-selector-dropdown");
    const themeOptions = document.querySelectorAll(".theme-option");
    const currentThemeDisplay = document.getElementById("current-theme-display");

    // Debug: Check if elements are found
    if (!themeSelector || !themeDropdown) {
      console.error("Theme selector elements not found:", { themeSelector, themeDropdown });
      return;
    }

    // Get current theme
    const getCurrentTheme = (): string => localStorage.getItem("selectedTheme") || "green";

    // Get theme label from value
    const getThemeLabel = (themeValue: string): string => {
      const option = document.querySelector(`.theme-option[data-theme="${themeValue}"]`);
      return option?.getAttribute("data-theme-label") || "Green Phosphor";
    };

    // Set theme
    const setTheme = (theme: string): void => {
      document.documentElement.setAttribute("data-theme", theme);
      document.body.setAttribute("data-theme", theme);
      localStorage.setItem("selectedTheme", theme);

      // Update active theme display
      themeOptions.forEach((option) => {
        const isActive = option.getAttribute("data-theme") === theme;
        option.classList.toggle("active", isActive);
      });

      // Update current theme display
      if (currentThemeDisplay) {
        currentThemeDisplay.textContent = getThemeLabel(theme);
      }
    };

    // Update active state display only (theme is already set by Layout.astro)
    const currentTheme = getCurrentTheme();
    themeOptions.forEach((option) => {
      const isActive = option.getAttribute("data-theme") === currentTheme;
      option.classList.toggle("active", isActive);
    });

    // Update current theme display
    if (currentThemeDisplay) {
      currentThemeDisplay.textContent = getThemeLabel(currentTheme);
    }

    // Toggle dropdown function
    const toggleDropdown = (show?: boolean) => {
      if (show === undefined) {
        // Toggle
        themeDropdown.classList.toggle("hidden");
        const isHidden = themeDropdown.classList.contains("hidden");
        themeSelector.setAttribute("aria-expanded", (!isHidden).toString());
      } else if (show) {
        // Show
        themeDropdown.classList.remove("hidden");
        themeSelector.setAttribute("aria-expanded", "true");
      } else {
        // Hide
        themeDropdown.classList.add("hidden");
        themeSelector.setAttribute("aria-expanded", "false");
      }
    };

    // Toggle on button click
    themeSelector.addEventListener("click", (e) => {
      e.stopPropagation();
      e.preventDefault();
      toggleDropdown();
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (
        e.target instanceof Node &&
        !themeSelector.contains(e.target) &&
        !themeDropdown.contains(e.target)
      ) {
        toggleDropdown(false);
      }
    });

    // Theme option selection
    themeOptions.forEach((option) => {
      option.addEventListener("click", (e) => {
        e.stopPropagation();
        const newTheme = option.getAttribute("data-theme");
        if (newTheme) {
          setTheme(newTheme);
          toggleDropdown(false);
        }
      });
    });

    // Close dropdown on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        toggleDropdown(false);
      }
    });
  });
</script>
