---
import { themes } from "../data/themes";

const currentPath = Astro.url.pathname;
const currentYear = new Date().getFullYear();

const pathMap: Record<string, string> = {
  "/": "~/index.html",
  "/about/": "~/about.html",
  "/projects/": "~/projects.html",
  "/quotes/": "~/quotes.html",
  "/bookbits/": "~/bookbits.html",
  "/resume/": "~/resume.html",
  "/tutorials/": "~/tutorials.html",
};

const currentFile = pathMap[currentPath] || "~" + currentPath.replace(/\/$/, "") + ".html";
---

<div class="status-line">
  <div class="status-left">
    <div class="status-mode">
      <span class="mode-text">NORMAL</span>
    </div>

    <div class="status-file">
      <span class="file-path">{currentFile}</span>
      <span class="file-modified">[+]</span>
    </div>

    <div class="status-git">
      <span class="git-branch"> main</span>
    </div>
  </div>

  <div class="status-center">
    <button
      id="theme-toggle"
      class="theme-toggle"
      aria-label="Change theme"
      title="Click to cycle themes"
    >
      <span class="theme-label"
        >[THEME: <span class="theme-name" id="current-theme-name">MONO</span>]</span
      >
    </button>

    <div id="theme-menu" class="theme-menu hidden">
      {
        themes.map((theme) => (
          <button class="theme-option" data-theme={theme.value} data-theme-label={theme.label}>
            <span class="theme-option-name">{theme.label}</span>
          </button>
        ))
      }
    </div>
  </div>

  <div class="status-right">
    <div class="status-year">
      <span class="year-text">Â© {currentYear}</span>
    </div>
    <div class="status-performance">
      <button
        id="performance-toggle"
        class="performance-toggle"
        aria-label="Toggle performance mode"
        title="Performance Mode: Disables visual effects for better performance"
      >
        <svg
          class="performance-icon"
          id="performance-icon"
          width="14"
          height="14"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"
        >
        </svg>
      </button>
    </div>

    <div class="status-filetype">
      <span class="filetype">html</span>
    </div>

    <div class="status-position">
      <span class="position-percent">100%</span>
      <span class="position-line">42:1</span>
    </div>
  </div>
</div>

<style>
  .hidden {
    display: none !important;
  }

  .status-line {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 28px;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(12px) saturate(1.2);
    -webkit-backdrop-filter: blur(12px) saturate(1.2);
    border-top: 1px solid rgba(var(--accent-primary-rgb), 0.3);
    box-shadow:
      0 -2px 10px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.05);
    z-index: var(--z-status-line, 25);
    font-family: DepartureMono, monospace;
    font-size: 0.9rem;
    display: flex;
    align-items: stretch;
    user-select: none;
  }

  @media (max-width: 767px) {
    .status-line {
      bottom: 56px; /* Above mobile nav */
    }
  }

  /* Layout Sections */
  .status-left,
  .status-right {
    display: flex;
    align-items: center;
  }

  .status-left {
    flex: 1 1 auto;
    min-width: 0;
    overflow: hidden;
  }

  .status-center {
    display: flex;
    align-items: center;
    padding: 0 0.5rem;
    position: relative;
    flex: 0 0 auto;
    overflow: hidden;
    height: 100%;
  }

  .status-right {
    flex: 1 1 auto;
    justify-content: flex-end;
    min-width: 0;
    overflow: hidden;
  }

  /* Mode Section */
  .status-mode {
    background: var(--color-accent-primary);
    color: #000000;
    padding: 0 0.75rem;
    font-weight: bold;
    display: flex;
    align-items: center;
    height: 100%;
    position: relative;
  }

  /* File Section */
  .status-file {
    padding: 0 0.75rem;
    color: var(--color-text-primary);
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: rgba(255, 255, 255, 0.05);
    height: 100%;
    position: relative;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .file-modified {
    color: var(--term-bright-yellow);
    font-weight: bold;
  }

  /* Git Section */
  .status-git {
    padding: 0 0.75rem;
    border-left: 1px solid var(--color-border);
    color: var(--term-bright-magenta);
    display: flex;
    align-items: center;
    height: 100%;
  }

  .git-branch::before {
    content: "";
    margin-right: 0.25rem;
  }

  /* Theme Toggle */
  .theme-toggle {
    background: rgba(var(--bg-color-rgb), 0.1);
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);
    border: 1px solid rgba(var(--bg-color-rgb), 0.2);
    border-radius: 2px;
    color: var(--color-text-secondary);
    padding: 0 0.5rem;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.78rem;
    line-height: 26px; /* 28px container - 2px for borders */
    height: 26px;
    transition: all 0.15s ease;
    text-transform: uppercase;
    box-shadow:
      0 1px 3px rgba(0, 0, 0, 0.05),
      inset 0 1px 0 rgba(255, 255, 255, 0.02);
    display: inline-flex;
    align-items: center;
  }

  .theme-toggle:hover {
    background: rgba(var(--accent-primary-rgb), 0.2);
    color: var(--color-accent-primary);
    border-color: rgba(var(--accent-primary-rgb), 0.4);
    box-shadow:
      0 0 8px rgba(var(--accent-primary-rgb), 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.04);
  }

  .theme-label {
    font-weight: 600;
    letter-spacing: 0.05em;
  }

  /* Filetype Section */
  .status-filetype {
    padding: 0 0.75rem;
    color: var(--term-bright-blue);
    display: flex;
    align-items: center;
    height: 100%;
    background: rgba(255, 255, 255, 0.05);
    position: relative;
    border-left: 1px solid var(--color-border);
  }

  /* Performance Toggle Section */
  .status-performance {
    padding: 0 0.75rem;
    display: flex;
    align-items: center;
    height: 100%;
    background: rgba(255, 255, 255, 0.05);
    position: relative;
    border-left: 1px solid var(--color-border);
  }

  .performance-toggle {
    background: transparent;
    border: none;
    color: var(--color-text-secondary);
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.15s ease;
  }

  .performance-toggle:hover {
    color: var(--color-accent-primary);
  }

  .performance-icon {
    width: 14px;
    height: 14px;
  }

  /* Year Section */
  .status-year {
    padding: 0 0.75rem;
    color: var(--color-text-secondary);
    display: flex;
    align-items: center;
    height: 100%;
    border-left: 1px solid var(--color-border);
  }

  .year-text {
    font-size: 0.78rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Position Section */
  .status-position {
    padding: 0 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    height: 100%;
    background: var(--color-accent-primary);
    color: #000000;
    font-weight: bold;
    position: relative;
    border-left: 1px solid var(--color-border);
  }

  .position-percent {
    font-size: 0.78rem;
  }

  .position-line {
    font-size: 0.84rem;
  }

  /* Theme Menu - Terminal Style */
  .theme-menu {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #000000;
    border: 1px solid var(--color-accent-primary);
    border-radius: 0;
    padding: 0;
    min-width: 180px;
    box-shadow: none;
    z-index: calc(var(--z-status-line, 25) + 1);
  }

  /* Add terminal-style border effect */
  .theme-menu::before {
    content: "";
    position: absolute;
    top: -1px;
    left: -1px;
    right: -1px;
    bottom: -1px;
    border: 1px solid rgba(var(--accent-primary-rgb), 0.3);
    pointer-events: none;
  }

  /* Tablet-specific theme menu positioning */
  @media (min-width: 641px) and (max-width: 1024px) {
    .theme-menu {
      position: fixed;
      bottom: 28px; /* Position at statusline height */
      left: auto;
      right: 50%;
      transform: translateX(50%);
      max-height: 200px;
      overflow-y: auto;
      border-radius: 0;
      box-shadow: none;
    }
  }

  .theme-option {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    background: #000000;
    border: none;
    border-bottom: 1px solid rgba(var(--accent-primary-rgb), 0.2);
    color: var(--color-text-secondary);
    cursor: pointer;
    font-family: inherit;
    font-size: 0.84rem;
    text-align: left;
    transition: all 0.15s ease;
    text-transform: uppercase;
  }

  .theme-option:last-child {
    border-bottom: none;
  }

  .theme-option:hover {
    background: rgba(var(--accent-primary-rgb), 0.1);
    color: var(--color-accent-primary);
    text-shadow: 0 0 2px var(--color-accent-primary);
  }

  /* Mobile adjustments */
  @media (max-width: 640px) {
    .status-line {
      height: 28px;
      font-size: 0.94rem;
    }

    .status-mode,
    .status-git,
    .status-filetype,
    .status-year {
      display: none;
    }

    .theme-toggle {
      font-size: 0.75rem;
      padding: 0.1rem 0.3rem;
    }

    .year-text {
      font-size: 0.81rem;
    }

    .position-percent {
      font-size: 0.81rem;
    }

    .position-line {
      font-size: 0.88rem;
    }

    .status-mode {
      padding: 0 0.5rem;
    }

    .status-file {
      padding: 0 0.5rem;
    }

    .status-performance {
      padding: 0 0.5rem;
    }

    .status-position {
      padding: 0 0.5rem;
    }
  }
</style>

<script>
  import { themeManager } from "../utils/themeManager";

  interface StatusLineElements {
    themeToggle: HTMLElement;
    themeMenu: HTMLElement;
    currentThemeName: HTMLElement;
    themeOptions: NodeListOf<Element>;
    performanceToggle?: HTMLElement | null;
    performanceIcon?: HTMLElement | null;
  }

  let cachedElements: StatusLineElements | null = null;

  function getCachedElements(): StatusLineElements | null {
    if (!cachedElements) {
      const themeToggle = document.getElementById("theme-toggle");
      const themeMenu = document.getElementById("theme-menu");
      const currentThemeName = document.getElementById("current-theme-name");
      const themeOptions = document.querySelectorAll(".theme-option");
      const performanceToggle = document.getElementById("performance-toggle");
      const performanceIcon = document.getElementById("performance-icon");

      if (!themeToggle || !themeMenu || !currentThemeName) {
        return null;
      }

      cachedElements = {
        themeToggle,
        themeMenu,
        currentThemeName,
        themeOptions,
        performanceToggle,
        performanceIcon,
      };
    }
    return cachedElements;
  }

  function initializeStatusLine() {
    const elements = getCachedElements();
    if (!elements) return;

    const { themeToggle, themeMenu, currentThemeName, themeOptions } = elements;

    // Check if already initialized to prevent duplicate event listeners
    if (themeToggle.dataset.initialized === "true") {
      return;
    }
    themeToggle.dataset.initialized = "true";

    const updateUI = () => {
      const currentTheme = themeManager.getCurrentTheme();
      currentThemeName.textContent = currentTheme.shortLabel || currentTheme.label;

      themeOptions.forEach((option) => {
        const isActive = option.getAttribute("data-theme") === currentTheme.value;
        option.classList.toggle("active", isActive);
      });
    };

    // Initialize UI with current theme
    updateUI();

    // Subscribe to theme changes
    themeManager.subscribe(updateUI);

    const isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;

    if (isTouchDevice) {
      themeToggle.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        themeMenu.classList.toggle("hidden");
      });
    } else {
      themeToggle.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        themeManager.cycleTheme();
      });

      themeToggle.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        e.stopPropagation();
        themeMenu.classList.toggle("hidden");
      });
    }

    themeOptions.forEach((option) => {
      option.addEventListener("click", (e) => {
        e.stopPropagation();
        const themeValue = option.getAttribute("data-theme");
        if (themeValue) {
          themeManager.setTheme(themeValue);
          themeMenu.classList.add("hidden");
        }
      });
    });

    document.addEventListener("click", (e) => {
      if (
        e.target instanceof Node &&
        !themeToggle.contains(e.target) &&
        !themeMenu.contains(e.target)
      ) {
        themeMenu.classList.add("hidden");
      }
    });

    document.addEventListener("keydown", (e) => {
      if (e.altKey && e.key === "t") {
        e.preventDefault();
        themeManager.cycleTheme();
      }

      if (e.key === "Escape") {
        themeMenu.classList.add("hidden");
      }
    });

    // Performance Mode Toggle
    const { performanceToggle, performanceIcon } = elements;

    if (performanceToggle && performanceIcon) {
      const ICONS = {
        lightning: "M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z",
        sparkles:
          "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.035-.259a3.375 3.375 0 002.456-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456z",
      };

      const isPerformanceMode = () => {
        const storedPerformanceMode = localStorage.getItem("performanceMode");
        return storedPerformanceMode !== null
          ? storedPerformanceMode === "true"
          : window.innerWidth < 768;
      };

      let pathElement: SVGPathElement | null = null;

      const setPerformanceMode = (enabled: boolean) => {
        localStorage.setItem("performanceMode", enabled.toString());
        document.body.setAttribute("data-performance", enabled.toString());

        if (!pathElement) {
          pathElement = performanceIcon.querySelector("path");
        }
        if (pathElement) pathElement.setAttribute("d", enabled ? ICONS.lightning : ICONS.sparkles);

        performanceToggle.style.color = enabled ? "var(--term-bright-yellow)" : "";
        performanceToggle.title = enabled
          ? "Performance Mode: ON - Click to enable visual effects"
          : "Quality Mode: ON - Click to disable visual effects";
      };

      if (!performanceIcon.querySelector("path")) {
        pathElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
        pathElement.setAttribute("stroke-linecap", "round");
        pathElement.setAttribute("stroke-linejoin", "round");
        performanceIcon.appendChild(pathElement);
      }

      const initialMode = isPerformanceMode();
      setPerformanceMode(initialMode);

      performanceToggle.addEventListener("click", (e) => {
        e.preventDefault();
        setPerformanceMode(!isPerformanceMode());
      });

      document.addEventListener("keydown", (e) => {
        if (e.altKey && e.key === "p") {
          e.preventDefault();
          setPerformanceMode(!isPerformanceMode());
        }
      });
    }
  }

  // Initialize on first load
  document.addEventListener("DOMContentLoaded", () => {
    cachedElements = null;
    initializeStatusLine();
  });

  // Re-initialize after ViewTransitions
  document.addEventListener("astro:page-load", () => {
    cachedElements = null;
    initializeStatusLine();
  });
</script>
