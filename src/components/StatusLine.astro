---
import { themes } from "../data/themes";

const currentPath = Astro.url.pathname;
const currentYear = new Date().getFullYear();

// Map paths to "file" names for vim-like display
const pathMap: Record<string, string> = {
  "/": "~/index.html",
  "/about/": "~/about.html",
  "/projects/": "~/projects.html",
  "/quotes/": "~/quotes.html",
  "/bookbits/": "~/bookbits.html",
  "/resume/": "~/resume.html",
  "/tutorials/": "~/tutorials.html",
};

const currentFile = pathMap[currentPath] || "~" + currentPath.replace(/\/$/, "") + ".html";
---

<div class="status-line">
  <!-- Left Section -->
  <div class="status-left">
    <!-- Mode Indicator -->
    <div class="status-mode">
      <span class="mode-text">NORMAL</span>
    </div>
    
    <!-- File Path -->
    <div class="status-file">
      <span class="file-path">{currentFile}</span>
      <span class="file-modified">[+]</span>
    </div>
    
    <!-- Git Branch -->
    <div class="status-git">
      <span class="git-branch"> main</span>
    </div>
  </div>

  <!-- Center Section -->
  <div class="status-center">
    <!-- Theme Selector -->
    <button
      id="theme-toggle"
      class="theme-toggle"
      aria-label="Change theme"
      title="Click to cycle themes"
    >
      <span class="theme-label">[THEME: <span class="theme-name" id="current-theme-name">MONO</span>]</span>
    </button>
  </div>

  <!-- Right Section -->
  <div class="status-right">
    <!-- Performance Mode Toggle -->
    <div class="status-performance">
      <button
        id="performance-toggle"
        class="performance-toggle"
        aria-label="Toggle performance mode"
        title="Performance Mode: Disables visual effects for better performance"
      >
        <svg class="performance-icon" id="performance-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <!-- Will be populated by JavaScript -->
        </svg>
      </button>
    </div>
    
    <!-- File Type -->
    <div class="status-filetype">
      <span class="filetype">html</span>
    </div>
    
    <!-- Position -->
    <div class="status-position">
      <span class="position-percent">100%</span>
      <span class="position-line">â˜° 42:1</span>
    </div>
  </div>

  <!-- Theme Menu (hidden by default) -->
  <div id="theme-menu" class="theme-menu hidden">
    {
      themes.map((theme) => (
        <button
          class="theme-option"
          data-theme={theme.value}
          data-theme-label={theme.label}
        >
          <span class="theme-option-name">{theme.label}</span>
        </button>
      ))
    }
  </div>
</div>

<style>
  .hidden {
    display: none !important;
  }

  .status-line {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 24px;
    background: rgba(var(--bg-color-rgb), 0.85);
    backdrop-filter: blur(12px) saturate(1.2);
    -webkit-backdrop-filter: blur(12px) saturate(1.2);
    border-top: 1px solid rgba(var(--bg-color-rgb), 0.3);
    box-shadow: 
      0 -2px 10px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.05);
    z-index: var(--z-status-line, 25);
    font-family: DepartureMono, monospace;
    font-size: 0.75rem;
    display: flex;
    align-items: stretch;
    user-select: none;
  }

  @media (max-width: 767px) {
    .status-line {
      bottom: 56px; /* Above mobile nav */
    }
  }

  /* Layout Sections */
  .status-left,
  .status-right {
    display: flex;
    align-items: center;
  }

  .status-left {
    flex: 1;
  }

  .status-center {
    display: flex;
    align-items: center;
    padding: 0 1rem;
  }

  .status-right {
    flex: 1;
    justify-content: flex-end;
  }

  /* Mode Section */
  .status-mode {
    background: var(--color-accent-primary);
    color: var(--color-bg-primary);
    padding: 0 0.75rem;
    font-weight: bold;
    display: flex;
    align-items: center;
    height: 100%;
    position: relative;
  }

  .status-mode::after {
    content: '';
    position: absolute;
    right: -12px;
    top: 0;
    width: 0;
    height: 0;
    border-top: 24px solid var(--color-accent-primary);
    border-right: 12px solid transparent;
  }

  /* File Section */
  .status-file {
    padding: 0 0.75rem 0 1.25rem;
    color: var(--color-text-primary);
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: var(--color-bg-secondary);
    height: 100%;
    position: relative;
  }

  .status-file::after {
    content: '';
    position: absolute;
    right: -12px;
    top: 0;
    width: 0;
    height: 0;
    border-top: 24px solid var(--color-bg-secondary);
    border-right: 12px solid transparent;
  }

  .file-modified {
    color: var(--term-bright-yellow);
    font-weight: bold;
  }

  /* Git Section */
  .status-git {
    padding: 0 0.75rem 0 1.25rem;
    color: var(--term-bright-magenta);
    display: flex;
    align-items: center;
    height: 100%;
  }

  .git-branch::before {
    content: '';
    margin-right: 0.25rem;
  }

  /* Theme Toggle */
  .theme-toggle {
    background: rgba(var(--bg-color-rgb), 0.1);
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);
    border: 1px solid rgba(var(--bg-color-rgb), 0.2);
    border-radius: 2px;
    color: var(--color-text-secondary);
    padding: 0.125rem 0.5rem;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.65rem;
    transition: all 0.15s ease;
    text-transform: uppercase;
    box-shadow: 
      0 1px 3px rgba(0, 0, 0, 0.05),
      inset 0 1px 0 rgba(255, 255, 255, 0.02);
  }

  .theme-toggle:hover {
    background: rgba(var(--accent-primary-rgb), 0.2);
    color: var(--color-accent-primary);
    border-color: rgba(var(--accent-primary-rgb), 0.4);
    box-shadow: 
      0 0 8px rgba(var(--accent-primary-rgb), 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.04);
  }

  .theme-label {
    font-weight: 600;
    letter-spacing: 0.05em;
  }

  /* Filetype Section */
  .status-filetype {
    padding: 0 0.75rem;
    color: var(--term-bright-blue);
    display: flex;
    align-items: center;
    height: 100%;
    background: var(--color-bg-secondary);
    position: relative;
  }

  .status-filetype::before {
    content: '';
    position: absolute;
    left: -12px;
    top: 0;
    width: 0;
    height: 0;
    border-top: 24px solid var(--color-bg-secondary);
    border-left: 12px solid transparent;
  }

  /* Performance Toggle Section */
  .status-performance {
    padding: 0 0.75rem;
    display: flex;
    align-items: center;
    height: 100%;
    background: var(--color-bg-secondary);
    position: relative;
  }

  .status-performance::before {
    content: '';
    position: absolute;
    left: -12px;
    top: 0;
    width: 0;
    height: 0;
    border-top: 24px solid var(--color-bg-secondary);
    border-left: 12px solid transparent;
  }

  .performance-toggle {
    background: transparent;
    border: none;
    color: var(--color-text-secondary);
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.15s ease;
  }

  .performance-toggle:hover {
    color: var(--color-accent-primary);
  }

  .performance-toggle.active {
    color: var(--term-bright-yellow);
  }

  .performance-icon {
    width: 14px;
    height: 14px;
  }

  /* Position Section */
  .status-position {
    padding: 0 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    height: 100%;
    background: var(--color-accent-primary);
    color: var(--color-bg-primary);
    font-weight: bold;
    position: relative;
  }

  .status-position::before {
    content: '';
    position: absolute;
    left: -12px;
    top: 0;
    width: 0;
    height: 0;
    border-top: 24px solid var(--color-accent-primary);
    border-left: 12px solid transparent;
  }

  .position-percent {
    font-size: 0.65rem;
  }

  .position-line {
    font-size: 0.7rem;
  }

  /* Theme Menu */
  .theme-menu {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 0.5rem;
    background: var(--color-bg-primary);
    border: 1px solid var(--color-border);
    border-radius: 3px;
    padding: 0.25rem;
    min-width: 150px;
    box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.2);
  }

  .theme-option {
    display: block;
    width: 100%;
    padding: 0.25rem 0.5rem;
    background: transparent;
    border: none;
    color: var(--color-text-secondary);
    cursor: pointer;
    font-family: inherit;
    font-size: 0.7rem;
    text-align: left;
    transition: all 0.15s ease;
    text-transform: uppercase;
  }

  .theme-option:hover {
    background: var(--color-bg-secondary);
    color: var(--color-accent-primary);
  }

  /* Mobile adjustments */
  @media (max-width: 640px) {
    .status-git,
    .status-filetype {
      display: none;
    }

    .status-file::after {
      display: none;
    }

    .status-performance::before {
      display: none;
    }

    .status-position::before {
      display: none;
    }

    .theme-toggle {
      font-size: 0.6rem;
      padding: 0.1rem 0.4rem;
    }

    .status-mode {
      padding: 0 0.5rem;
    }

    .status-file {
      padding: 0 0.5rem;
    }

    .status-performance {
      padding: 0 0.5rem;
    }

    .status-position {
      padding: 0 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    const themeMenu = document.getElementById("theme-menu");
    const currentThemeName = document.getElementById("current-theme-name");
    const themeOptions = document.querySelectorAll(".theme-option");

    if (!themeToggle || !themeMenu || !currentThemeName) {
      console.error("StatusLine: Required elements not found");
      return;
    }

    const themes = ["green", "amber", "monochrome", "doom"];
    const themeLabels: Record<string, string> = {
      green: "GREEN",
      amber: "AMBER",
      monochrome: "MONO",
      doom: "DOOM",
    };

    const getCurrentTheme = (): string => {
      return localStorage.getItem("selectedTheme") || "monochrome";
    };

    const setTheme = (theme: string): void => {
      document.documentElement.setAttribute("data-theme", theme);
      document.body.setAttribute("data-theme", theme);
      localStorage.setItem("selectedTheme", theme);

      // Update display
      currentThemeName.textContent = themeLabels[theme] || theme.toUpperCase();

      // Update active state in menu
      themeOptions.forEach((option) => {
        const isActive = option.getAttribute("data-theme") === theme;
        if (isActive) {
          option.style.color = "var(--accent-primary)";
          option.style.fontWeight = "bold";
        } else {
          option.style.color = "";
          option.style.fontWeight = "";
        }
      });
    };

    // Initialize current theme
    const currentTheme = getCurrentTheme();
    setTheme(currentTheme);

    // Cycle through themes on click
    themeToggle.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      // Toggle menu on click
      themeMenu.classList.toggle("hidden");
    });

    // Handle theme selection from menu
    themeOptions.forEach((option) => {
      option.addEventListener("click", (e) => {
        e.stopPropagation();
        const theme = option.getAttribute("data-theme");
        if (theme) {
          setTheme(theme);
          themeMenu.classList.add("hidden");
        }
      });
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (
        e.target instanceof Node &&
        !themeToggle.contains(e.target) &&
        !themeMenu.contains(e.target)
      ) {
        themeMenu.classList.add("hidden");
      }
    });

    // Keyboard shortcuts
    document.addEventListener("keydown", (e) => {
      // Alt+T to cycle theme
      if (e.altKey && e.key === "t") {
        e.preventDefault();
        const current = getCurrentTheme();
        const currentIndex = themes.indexOf(current);
        const nextIndex = (currentIndex + 1) % themes.length;
        setTheme(themes[nextIndex]);
      }

      // Escape to close menu
      if (e.key === "Escape") {
        themeMenu.classList.add("hidden");
      }
    });

    // Performance Mode Toggle
    const performanceToggle = document.getElementById("performance-toggle");
    const performanceIcon = document.getElementById("performance-icon");

    if (performanceToggle && performanceIcon) {
      // SVG paths for icons
      const lightningPath = "M3.75 13.5l10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75z";
      const sparklesPath = "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.035-.259a3.375 3.375 0 002.456-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456z";

      // Check if performance mode is enabled (default: true on mobile, false on desktop)
      const getPerformanceMode = (): boolean => {
        const stored = localStorage.getItem("performanceMode");
        if (stored !== null) {
          return stored === "true";
        }
        // Default: enabled on mobile, disabled on desktop
        return window.innerWidth < 768;
      };

      const setPerformanceMode = (enabled: boolean): void => {
        localStorage.setItem("performanceMode", enabled.toString());
        document.body.setAttribute("data-performance", enabled.toString());
        
        // Update icon
        const path = performanceIcon.querySelector("path");
        if (path) {
          path.setAttribute("d", enabled ? lightningPath : sparklesPath);
        }
        
        // Update button state
        if (enabled) {
          performanceToggle.classList.add("active");
          performanceToggle.setAttribute("title", "Performance Mode: ON - Click to enable visual effects");
        } else {
          performanceToggle.classList.remove("active");
          performanceToggle.setAttribute("title", "Quality Mode: ON - Click to disable visual effects for better performance");
        }
      };

      // Initialize performance mode
      const initialMode = getPerformanceMode();
      setPerformanceMode(initialMode);

      // Add path element to SVG
      const pathElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
      pathElement.setAttribute("stroke-linecap", "round");
      pathElement.setAttribute("stroke-linejoin", "round");
      pathElement.setAttribute("d", initialMode ? lightningPath : sparklesPath);
      performanceIcon.appendChild(pathElement);

      // Toggle performance mode on click
      performanceToggle.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const currentMode = getPerformanceMode();
        setPerformanceMode(!currentMode);
      });

      // Keyboard shortcut: Alt+P for performance toggle
      document.addEventListener("keydown", (e) => {
        if (e.altKey && e.key === "p") {
          e.preventDefault();
          const currentMode = getPerformanceMode();
          setPerformanceMode(!currentMode);
        }
      });
    }
  });
</script>