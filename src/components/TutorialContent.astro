---
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "../utils/formatDate";

// Get all tutorials that are not drafts
const allTutorials = await getCollection("tutorials", ({ data }: CollectionEntry<"tutorials">) => {
  return import.meta.env.DEV || !data.draft;
});

// Sort tutorials by part number
const sortedTutorials: CollectionEntry<"tutorials">[] = allTutorials.sort((a: CollectionEntry<"tutorials">, b: CollectionEntry<"tutorials">) => a.data.part - b.data.part);

// Debug log to see if tutorials are being loaded
console.log(`Loaded ${allTutorials.length} tutorials:`, allTutorials.map((t: CollectionEntry<"tutorials">) => t.slug));
---

<div class="tutorial-content-container">
  {allTutorials.length === 0 ? (
    <div class="no-tutorials p-8 text-center">
      <h2 class="text-2xl font-bold mb-4">No Tutorials Found</h2>
      <p>There are no tutorials available at the moment. Please check back later!</p>
    </div>
  ) : (
    sortedTutorials.map(async (tutorial) => {
      try {
        const { Content } = await tutorial.render();

        return (
          <div
            id={`tutorial-${tutorial.slug}`}
            class="tutorial-content hidden"
            data-slug={tutorial.slug}
          >
            <!-- Tutorial Header -->
            <header class="mb-8">
              <div class="flex items-center gap-2 mb-3">
                <span class:list={`px-2 py-1 text-xs rounded-md ${
                  tutorial.data.difficulty === "beginner" ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" :
                  tutorial.data.difficulty === "intermediate" ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200" :
                  tutorial.data.difficulty === "advanced" ? "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200" :
                  "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                }`}>
                  {tutorial.data.difficulty}
                </span>
                <span class="text-sm text-foreground-secondary">Part {tutorial.data.part}</span>
              </div>

              <h1 class="text-3xl md:text-4xl font-bold mb-4">{tutorial.data.title}</h1>

              <p class="text-lg text-foreground-secondary mb-4">
                {tutorial.data.description}
              </p>

              <div class="flex flex-wrap gap-2 mb-4">
                {tutorial.data.topics.map((topic: string) => (
                  <span class="text-xs px-2 py-1 bg-background-secondary rounded-md">
                    {topic}
                  </span>
                ))}
              </div>

              <div class="flex flex-col md:flex-row gap-4 mb-4 text-sm text-foreground-secondary">
                <div>
                  <strong>Published:</strong> {formatDate(tutorial.data.date)}
                  {tutorial.data.updatedDate && tutorial.data.updatedDate > tutorial.data.date && (
                    <span> (Updated: {formatDate(tutorial.data.updatedDate)})</span>
                  )}
                </div>

                <div>
                  <strong>Author:</strong> {tutorial.data.author}
                </div>
              </div>

              <!-- Environment Details -->
              <div class="environment-info border border-border rounded-md p-4 mb-6 bg-background-secondary">
                <h2 class="text-lg font-semibold mb-2">Environment Details</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <strong>Hardware:</strong> {tutorial.data.environment.hardware}
                  </div>
                  <div>
                    <strong>Kernel:</strong> {tutorial.data.environment.kernel}
                  </div>
                  <div>
                    <strong>OS:</strong> {tutorial.data.environment.os}
                  </div>
                </div>
              </div>

              <!-- Prerequisites -->
              {tutorial.data.prerequisites && tutorial.data.prerequisites.length > 0 && (
                <div class="prerequisites mb-6">
                  <h2 class="text-lg font-semibold mb-2">Prerequisites</h2>
                  <ul class="list-disc pl-5">
                    {tutorial.data.prerequisites.map((prereq: string) => (
                      <li>{prereq}</li>
                    ))}
                  </ul>
                </div>
              )}

              <!-- GitHub Link -->
              {tutorial.data.github && (
                <a
                  href={tutorial.data.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark transition-colors mb-6"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
                  </svg>
                  View Source Code on GitHub
                </a>
              )}
            </header>

            <!-- Content -->
            <div class="tutorial-content-body prose prose-lg dark:prose-invert prose-headings:font-medium prose-a:text-primary prose-a:no-underline hover:prose-a:underline max-w-none">
              <Content />
            </div>

            <!-- Tutorial Navigation -->
            <div class="tutorial-navigation mt-12 flex flex-col md:flex-row gap-4 border-t border-border pt-8">
              {
                (() => {
                  const currentIndex = sortedTutorials.findIndex((t) => t.slug === tutorial.slug);
                  const prevTutorial = currentIndex > 0 ? sortedTutorials[currentIndex - 1] : null;
                  const nextTutorial = currentIndex < sortedTutorials.length - 1 ? sortedTutorials[currentIndex + 1] : null;

                  return (
                    <>
                      {prevTutorial ? (
                        <a
                          href={`#tutorial-${prevTutorial.slug}`}
                          class="prev-link tutorial-nav-link flex-1 group p-4 border border-border rounded-md hover:border-primary transition-colors"
                          data-slug={prevTutorial.slug}
                        >
                          <span class="block text-sm text-foreground-secondary mb-1">Previous Tutorial</span>
                          <span class="block font-semibold group-hover:text-primary transition-colors">
                            ← Part {prevTutorial.data.part}: {prevTutorial.data.title}
                          </span>
                        </a>
                      ) : (
                        <div class="flex-1"></div>
                      )}

                      {nextTutorial ? (
                        <a
                          href={`#tutorial-${nextTutorial.slug}`}
                          class="next-link tutorial-nav-link flex-1 group p-4 border border-border rounded-md hover:border-primary transition-colors text-right"
                          data-slug={nextTutorial.slug}
                        >
                          <span class="block text-sm text-foreground-secondary mb-1">Next Tutorial</span>
                          <span class="block font-semibold group-hover:text-primary transition-colors">
                            Part {nextTutorial.data.part}: {nextTutorial.data.title} →
                          </span>
                        </a>
                      ) : (
                        <div class="flex-1"></div>
                      )}
                    </>
                  );
                })()
              }
            </div>

            <!-- Related Tutorials -->
            {sortedTutorials.length > 1 &&
              (() => {
                // Get related tutorials (same difficulty or topics)
                const relatedTutorials = sortedTutorials
                  .filter((t) => {
                    // Not the current tutorial and either same difficulty or has common topics
                    if (t.slug === tutorial.slug) return false;

                    const sameDifficulty = t.data.difficulty === tutorial.data.difficulty;
                    const hasCommonTopic = t.data.topics.some((topic: string) => tutorial.data.topics.includes(topic));

                    return sameDifficulty || hasCommonTopic;
                  })
                  .slice(0, 3); // Limit to 3 related tutorials

                return relatedTutorials.length > 0 ? (
                  <div class="related-tutorials mt-12 border-t border-border pt-8">
                    <h2 class="text-2xl font-bold mb-6">Related Tutorials</h2>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                      {relatedTutorials.map((relatedTutorial: CollectionEntry<"tutorials">) => (
                        <a
                          href={`#tutorial-${relatedTutorial.slug}`}
                          class="related-tutorial-card tutorial-nav-link border border-border rounded-md overflow-hidden hover:border-primary transition-colors p-4"
                          data-slug={relatedTutorial.slug}
                        >
                          <div class="flex items-center gap-2 mb-2">
                            <span class:list={`px-2 py-1 text-xs rounded-md ${
                              relatedTutorial.data.difficulty === "beginner" ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" :
                              relatedTutorial.data.difficulty === "intermediate" ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200" :
                              relatedTutorial.data.difficulty === "advanced" ? "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200" :
                              "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                            }`}>
                              {relatedTutorial.data.difficulty}
                            </span>
                            <span class="text-sm text-foreground-secondary">Part {relatedTutorial.data.part}</span>
                          </div>

                          <h3 class="text-lg font-semibold hover:text-primary">
                            {relatedTutorial.data.title}
                          </h3>
                        </a>
                      ))}
                    </div>
                  </div>
                ) : null;
              })()
            }
          </div>
        );
      } catch (error) {
        console.error(`Error rendering tutorial ${tutorial.slug}:`, error);
        return (
          <div id={`tutorial-${tutorial.slug}`} class="tutorial-content hidden" data-slug={tutorial.slug}>
            <div class="error-message p-6 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-md">
              <h2 class="text-xl font-bold mb-2">Error Rendering Tutorial</h2>
              <p>There was an error rendering this tutorial. Please try again later or contact the site administrator.</p>
              <p class="mt-2 font-mono text-sm">{error instanceof Error ? error.message : String(error)}</p>
            </div>
          </div>
        );
      }
    })
  )}
</div>

<style>
  /* Additional styling for tutorial content */
  .tutorial-content-body :global(h2) {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-weight: 600;
  }

  .tutorial-content-body :global(h3) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .tutorial-content-body :global(pre) {
    border-radius: 0.375rem;
    overflow-x: auto;
  }

  .tutorial-content-body :global(a) {
    color: var(--primary);
    text-decoration: none;
  }

  .tutorial-content-body :global(a:hover) {
    text-decoration: underline;
  }

  .tutorial-content-body :global(ul) {
    list-style-type: disc;
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .tutorial-content-body :global(ol) {
    list-style-type: decimal;
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle tutorial link clicks
    document.querySelectorAll('.tutorial-link, .tutorial-nav-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const slug = (link as HTMLElement).getAttribute('data-slug');
        if (slug) {
          showTutorial(slug);
        }
      });
    });

    // Show a tutorial by slug
    function showTutorial(slug: string): void {
      // Hide all tutorials
      document.querySelectorAll('.tutorial-content').forEach(content => {
        content.classList.add('hidden');
      });

      // Show the selected tutorial
      const tutorialElement = document.getElementById(`tutorial-${slug}`);
      if (tutorialElement) {
        tutorialElement.classList.remove('hidden');

        // Scroll to top of tutorial
        tutorialElement.scrollIntoView({ behavior: 'smooth' });
      }
    }
  });
</script>
