---
// Pass props to determine size
const { width = 96, height = 96, class: className = "", useGithub = false } = Astro.props;

// GitHub username to fetch the avatar for
const username = "UtsavBalar1231";

// Fetch GitHub user data
let avatarUrl = "";
let name = "";

// Generate a random seed for the cat image to avoid caching
const randomSeed = Math.floor(Math.random() * 1000);

// Default to cat image unless explicitly asked for GitHub
if (useGithub) {
  try {
    // GitHub API has rate limits, so let's add a timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    const response = await fetch(`https://api.github.com/users/${username}`, {
      signal: controller.signal,
      headers: {
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "Astro-Portfolio",
      },
    });

    clearTimeout(timeoutId);

    if (response.ok) {
      const userData = await response.json();
      avatarUrl = userData.avatar_url;
      name = userData.name || username;
    } else {
      console.error(`Failed to fetch GitHub user data: ${response.status}`);
    }
  } catch (error) {
    console.error("Error fetching GitHub user data:", error);
  }
} else {
  // Get a random cat image by default
  	avatarUrl = `https://cataas.com/cat/funny?width=${width}&height=${height}&s=${randomSeed}`;
  name = "Random Cat";
}

// If GitHub fetch fails or cat image fails, try alternative cat API
if (!avatarUrl) {
  try {
    // Try an alternative cat API
    avatarUrl = `https://api.thecatapi.com/v1/images/search?size=small&s=${randomSeed}`;
    name = "Random Cat";
  } catch (error) {
    console.error("Error fetching alternative cat image:", error);
  }
}
---

{
  avatarUrl ? (
    <div class={`avatar-container ${className}`}>
      <img
        src={avatarUrl}
        alt={name ? `${name}'s avatar` : "Random cat image"}
        title={name || "Random cat image"}
        width={width}
        height={height}
        loading="eager"
        id="profile-avatar"
        class="w-full h-full object-cover"
      />
    </div>
  ) : (
    <div class={`avatar-fallback ${className}`} style={`width: ${width}px; height: ${height}px;`}>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width={width}
        height={height}
        viewBox="0 0 96 96"
        class="avatar-fallback-svg"
      >
        <rect class="avatar-bg" width="96" height="96" rx="48" fill="var(--color-accent-primary, #3b82f6)"></rect>
        <text
          x="48"
          y="58"
          class="avatar-text"
          font-family="AdwaitaMono, monospace"
          font-size="32"
          font-weight="bold"
          text-anchor="middle"
          fill="white">UB</text
        >
      </svg>
    </div>
  )
}

<style>
  .avatar-container {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
  }

  .avatar-container img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    min-width: 100%;
    min-height: 100%;
  }

  .avatar-fallback {
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    overflow: hidden;
  }

  .avatar-fallback-svg {
    transition: all 0.3s ease-in-out;
  }
</style>

<script>
  // Add function to refresh cat image that will be called by the refresh button
  window.refreshCatImage = () => {
    const avatarEl = document.getElementById('profile-avatar') as HTMLImageElement;
    if (avatarEl) {
      const random = Math.floor(Math.random() * 1000);
      // Get dimensions from parent container if available
      const container = avatarEl.closest('.avatar-container');
      const width = container ? container.clientWidth : avatarEl.getAttribute('width');
      const height = container ? container.clientHeight : avatarEl.getAttribute('height');
      avatarEl.src = `https://cataas.com/cat?width=${width}&height=${height}&s=${random}`;
    }
  };
</script>
