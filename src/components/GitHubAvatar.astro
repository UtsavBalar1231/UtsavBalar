---
import ThemeAvatar from "./ThemeAvatar.astro";

// Pass props to determine size
const { width = 96, height = 96, class: className = "", useGithub = false } = Astro.props;

// GitHub username to fetch the avatar for
const username = "UtsavBalar1231";

// Fetch GitHub user data
let avatarUrl = "";
let name = "";

// Generate a random seed for the cat image to avoid caching
const randomSeed = Math.floor(Math.random() * 1000);

// Default to cat image unless explicitly asked for GitHub
if (useGithub) {
  try {
    // GitHub API has rate limits, so let's add a timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    const response = await fetch(`https://api.github.com/users/${username}`, {
      signal: controller.signal,
      headers: {
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "Astro-Portfolio",
      },
    });

    clearTimeout(timeoutId);

    if (response.ok) {
      const userData = await response.json();
      avatarUrl = userData.avatar_url;
      name = userData.name || username;
    } else {
      console.error(`Failed to fetch GitHub user data: ${response.status}`);
    }
  } catch (error) {
    console.error("Error fetching GitHub user data:", error);
  }
} else {
  // Get a random cat image by default
  avatarUrl = `https://cataas.com/cat?width=${width}&height=${height}&s=${randomSeed}`;
  name = "Random Cat";
}

// If GitHub fetch fails or cat image fails, try alternative cat API
if (!avatarUrl) {
  try {
    // Try an alternative cat API
    avatarUrl = `https://api.thecatapi.com/v1/images/search?size=small&s=${randomSeed}`;
    name = "Random Cat";
  } catch (error) {
    console.error("Error fetching alternative cat image:", error);
  }
}

// Default avatar if all fetches fail
const defaultAvatar = "/img/default-avatar.svg";
---

{
  avatarUrl ? (
    <img
      src={avatarUrl}
      alt={name ? `${name}'s avatar` : "Random cat image"}
      title={name || "Random cat image"}
      width={width}
      height={height}
      class={className}
      loading="eager"
      id="profile-avatar"
    />
  ) : (
    <ThemeAvatar width={width} height={height} class={className} />
  )
}

<script>
  // Add function to refresh cat image that will be called by the refresh button
  window.refreshCatImage = () => {
    const avatarEl = document.getElementById('profile-avatar') as HTMLImageElement;
    if (avatarEl) {
      const random = Math.floor(Math.random() * 1000);
      const width = avatarEl.getAttribute('width');
      const height = avatarEl.getAttribute('height');
      avatarEl.src = `https://cataas.com/cat?width=${width}&height=${height}&s=${random}`;
    }
  };
</script>
