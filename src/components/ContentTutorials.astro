---
import { getCollection, type CollectionEntry } from "astro:content";
import { formatDate } from "../utils/formatDate";

// Get all tutorials that are not drafts
const allTutorials = await getCollection("tutorials", ({ data }: CollectionEntry<"tutorials">) => {
  return import.meta.env.DEV || !data.draft;
});

// Sort tutorials by part number
const sortedTutorials: CollectionEntry<"tutorials">[] = allTutorials.sort(
  (a: CollectionEntry<"tutorials">, b: CollectionEntry<"tutorials">) => a.data.part - b.data.part
);

// Get unique difficulty levels and topics for filtering
const difficulties = [
  ...new Set(
    sortedTutorials.map((tutorial: CollectionEntry<"tutorials">) => tutorial.data.difficulty)
  ),
];
const allTopics = sortedTutorials.flatMap(
  (tutorial: CollectionEntry<"tutorials">) => tutorial.data.topics
);
const uniqueTopics = [...new Set(allTopics)];

// Debug log to see if tutorials are being loaded
console.log(
  `Loaded ${allTutorials.length} tutorials:`,
  allTutorials.map((t: CollectionEntry<"tutorials">) => t.slug)
);
---

<div class="container visible mx-auto block px-0 py-4 opacity-100">
  <h1 class="mb-6 text-3xl font-bold">Linux Kernel Device Driver Tutorials</h1>

  <div class="mb-8">
    <p class="mb-4">
      A comprehensive tutorial series on Linux kernel device driver development, from basic concepts
      to advanced techniques. Designed for embedded engineers, kernel developers, and anyone
      interested in kernel module development.
    </p>
  </div>

  <!-- Filters -->
  <div class="filters mb-8">
    <h2 class="mb-4 text-xl font-semibold">Filters</h2>

    <div class="filter-container grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6">
      <!-- Difficulty Filter -->
      <div class="difficulty-filter">
        <h3 class="text-md mb-2 font-medium">Difficulty Level</h3>
        <div class="flex flex-wrap gap-2">
          <button
            class="filter-btn all-btn bg-background border-border rounded-md border px-3 py-1 text-sm"
            data-filter="difficulty"
            data-value="all"
          >
            All
          </button>
          {
            difficulties.map((difficulty) => (
              <button
                class="filter-btn bg-background border-border rounded-md border px-3 py-1 text-sm"
                data-filter="difficulty"
                data-value={difficulty}
              >
                {(difficulty as string).charAt(0).toUpperCase() + (difficulty as string).slice(1)}
              </button>
            ))
          }
        </div>
      </div>

      <!-- Topics Filter -->
      <div class="topics-filter">
        <h3 class="text-md mb-2 font-medium">Topics</h3>
        <div class="flex flex-wrap gap-2">
          <button
            class="filter-btn all-btn bg-background border-border rounded-md border px-3 py-1 text-sm"
            data-filter="topics"
            data-value="all"
          >
            All
          </button>
          {
            uniqueTopics.map((topic) => (
              <button
                class="filter-btn bg-background border-border rounded-md border px-3 py-1 text-sm"
                data-filter="topics"
                data-value={topic}
              >
                {topic}
              </button>
            ))
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Tutorials Grid -->
  <div class="tutorials-grid grid grid-cols-1 gap-4 sm:grid-cols-2 sm:gap-6 lg:grid-cols-3">
    {
      sortedTutorials.map((tutorial) => (
        <div
          class="tutorial-card border-border overflow-hidden rounded-md border"
          data-difficulty={tutorial.data.difficulty}
          data-topics={tutorial.data.topics.join(",")}
        >
          <div class="p-6">
            <div class="mb-3 flex items-center gap-2">
              <span
                class:list={`rounded-md px-2 py-1 text-xs ${
                  tutorial.data.difficulty === "beginner"
                    ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                    : tutorial.data.difficulty === "intermediate"
                      ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
                      : tutorial.data.difficulty === "advanced"
                        ? "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
                        : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                }`}
              >
                {tutorial.data.difficulty}
              </span>
              <span class="text-foreground-secondary text-sm">Part {tutorial.data.part}</span>
            </div>

            <h2 class="mb-2 text-xl font-semibold hover:text-primary">
              <a
                href={`#tutorial-${tutorial.slug}`}
                class="tutorial-link"
                data-slug={tutorial.slug}
              >
                {tutorial.data.title}
              </a>
            </h2>

            <p class="text-foreground-secondary mb-4 line-clamp-3 text-sm">
              {tutorial.data.description}
            </p>

            <div class="mb-4 flex flex-wrap gap-2">
              {tutorial.data.topics.slice(0, 3).map((topic: string) => (
                <span class="bg-background-secondary rounded-md px-2 py-1 text-xs">{topic}</span>
              ))}
              {tutorial.data.topics.length > 3 && (
                <span class="bg-background-secondary rounded-md px-2 py-1 text-xs">
                  +{tutorial.data.topics.length - 3} more
                </span>
              )}
            </div>

            <div class="text-foreground-secondary text-xs">
              {formatDate(tutorial.data.date)}
              {tutorial.data.updatedDate && tutorial.data.updatedDate > tutorial.data.date && (
                <span> (Updated: {formatDate(tutorial.data.updatedDate)})</span>
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- No Results Message -->
  <div id="no-results" class="hidden py-12 text-center">
    <p class="text-xl">No tutorials match your filters.</p>
    <button id="reset-filters" class="mt-4 rounded-md bg-primary px-4 py-2 text-white">
      Reset Filters
    </button>
  </div>
</div>

<script>
  // Filtering functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Elements
    const filterButtons = document.querySelectorAll(".filter-btn");
    const tutorialCards = document.querySelectorAll(".tutorial-card");
    const noResults = document.getElementById("no-results");
    const resetButton = document.getElementById("reset-filters");

    // Active filters
    let activeFilters: { [key: string]: string } = {
      difficulty: "all",
      topics: "all",
    };

    // Set active class and update filters
    filterButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // Update active status for this filter type
        const filterType = (button as HTMLElement).dataset.filter as string;
        const filterValue = (button as HTMLElement).dataset.value as string;

        // Remove active class from all buttons of this type
        document.querySelectorAll(`.filter-btn[data-filter="${filterType}"]`).forEach((btn) => {
          btn.classList.remove("active", "bg-primary", "text-white");
          btn.classList.add("bg-background");
        });

        // Add active class to clicked button
        button.classList.add("active", "bg-primary", "text-white");
        button.classList.remove("bg-background");

        // Update active filters
        activeFilters[filterType] = filterValue;

        // Apply filters
        applyFilters();
      });
    });

    // Reset filters
    if (resetButton) {
      resetButton.addEventListener("click", () => {
        // Reset active filters
        activeFilters = {
          difficulty: "all",
          topics: "all",
        };

        // Reset button styles
        document.querySelectorAll(".filter-btn").forEach((btn) => {
          btn.classList.remove("active", "bg-primary", "text-white");
          btn.classList.add("bg-background");
        });

        // Activate "All" buttons
        document.querySelectorAll(".all-btn").forEach((btn) => {
          btn.classList.add("active", "bg-primary", "text-white");
          btn.classList.remove("bg-background");
        });

        // Apply filters
        applyFilters();
      });
    }

    // Apply filters function
    function applyFilters() {
      let visibleCount = 0;

      tutorialCards.forEach((card) => {
        const cardDifficulty = (card as HTMLElement).dataset.difficulty as string;
        const cardTopics = ((card as HTMLElement).dataset.topics as string).split(",");

        // Check if card matches all active filters
        const matchesDifficulty =
          activeFilters.difficulty === "all" || activeFilters.difficulty === cardDifficulty;
        const matchesTopic =
          activeFilters.topics === "all" || cardTopics.includes(activeFilters.topics);

        // Show/hide card
        if (matchesDifficulty && matchesTopic) {
          card.classList.remove("hidden");
          visibleCount++;
        } else {
          card.classList.add("hidden");
        }
      });

      // Show "no results" message if needed
      if (noResults) {
        if (visibleCount === 0) {
          noResults.classList.remove("hidden");
        } else {
          noResults.classList.add("hidden");
        }
      }
    }

    // Initialize with "All" selected
    document.querySelectorAll(".all-btn").forEach((btn) => {
      btn.classList.add("active", "bg-primary", "text-white");
      btn.classList.remove("bg-background");
    });

    // Add click handlers for tutorial links
    document.querySelectorAll(".tutorial-link").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        // Here you would typically show the tutorial content
        // This functionality will be added with dynamic content loading
      });
    });
  });
</script>
