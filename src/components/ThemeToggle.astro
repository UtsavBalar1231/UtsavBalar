---
import { themes } from "./ThemeManager.astro";

// Group themes by type
const themeGroups = {
  "Dark Themes": themes.filter(
    (t) => !t.value.includes("light") && !t.value.includes("latte"),
  ),
  "Light Themes": themes.filter(
    (t) => t.value.includes("light") || t.value.includes("latte"),
  ),
};
---

<div class="theme-toggle relative">
  <button
    id="theme-toggle-btn"
    class="flex items-center justify-center w-10 h-10 rounded-3xl transition-all duration-150 border-2 hover:-translate-y-0.5 p-3 theme-toggle-btn"
    title="Change theme"
  >
    <span class="material-symbols-rounded icon-sm">
      palette
    </span>
  </button>

  <div
    id="theme-dropdown"
    class="absolute right-0 bottom-12 mt-2 py-2 w-64 rounded-md border shadow-lg hidden z-20 theme-dropdown max-h-96 overflow-y-auto"
  >
    {
      Object.entries(themeGroups).map(([groupName, groupThemes]) => (
        <div>
          <div class="px-4 py-1 text-xs text-primary font-bold uppercase border-b border-gray-600 mb-1">
            {groupName}
          </div>
          {groupThemes.map((theme) => (
            <button
              class="theme-option block w-full text-left px-4 py-2 text-sm flex items-center hover:bg-opacity-20"
              data-theme={theme.value}
            >
              <span class={`theme-dot theme-dot-${theme.value}`} />
              {theme.label}
            </button>
          ))}
        </div>
      ))
    }
  </div>
</div>

<style>
  .theme-toggle-btn {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--border-color);
  }

  .theme-toggle-btn:hover {
    background-color: var(--accent-primary);
    color: var(--bg-primary);
  }

  .theme-dropdown {
    background-color: var(--bg-primary);
    border-color: var(--border-color);
  }

  .theme-option:hover {
    background-color: var(--bg-secondary);
  }

  .theme-option.active {
    background-color: var(--bg-secondary);
  }

  /* Scrollbar styling for theme dropdown */
  .theme-dropdown::-webkit-scrollbar {
    width: 6px;
  }

  .theme-dropdown::-webkit-scrollbar-track {
    background: var(--bg-secondary);
    border-radius: 3px;
  }

  .theme-dropdown::-webkit-scrollbar-thumb {
    background-color: var(--border-color);
    border-radius: 3px;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle-btn");
    const themeDropdown = document.getElementById("theme-dropdown");
    const themeOptions = document.querySelectorAll(".theme-option");

    // Get current theme
    const getCurrentTheme = (): string =>
      localStorage.getItem("theme") || "default";

    // Set theme
    const setTheme = (theme: string): void => {
      document.documentElement.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);

      // Update active theme display
      themeOptions.forEach((option) => {
        option.classList.toggle(
          "active",
          option.getAttribute("data-theme") === theme,
        );
      });
    };

    // Initialize active theme
    setTheme(getCurrentTheme());

    // Show/hide theme dropdown - with null checks
    if (themeToggle && themeDropdown) {
      themeToggle.addEventListener("click", () => {
        themeDropdown.classList.toggle("hidden");

        // Scroll to active theme in dropdown
        const activeTheme = getCurrentTheme();
        const activeOption = document.querySelector(
          `.theme-option[data-theme="${activeTheme}"]`,
        );
        if (activeOption && !themeDropdown.classList.contains("hidden")) {
          setTimeout(() => {
            activeOption.scrollIntoView({
              block: "center",
              behavior: "smooth",
            });
          }, 100);
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        if (
          e.target instanceof Node &&
          themeToggle &&
          themeDropdown &&
          !themeToggle.contains(e.target) &&
          !themeDropdown.contains(e.target)
        ) {
          themeDropdown.classList.add("hidden");
        }
      });
    }

    // Theme option selection
    themeOptions.forEach((option) => {
      option.addEventListener("click", () => {
        const newTheme = option.getAttribute("data-theme");
        if (newTheme && themeDropdown) {
          setTheme(newTheme);
          themeDropdown.classList.add("hidden");
        }
      });
    });
  });
</script>
