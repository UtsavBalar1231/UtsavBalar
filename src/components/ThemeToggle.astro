---
// Theme options array with name and display name
const themes = [
  { value: "default", label: "Default (Dark)" },
  { value: "gruvbox-dark", label: "Gruvbox Dark" },
  { value: "gruvbox-light", label: "Gruvbox Light" },
  { value: "catppuccin", label: "Catppuccin" },
  { value: "everforest", label: "Everforest" },
  { value: "nord", label: "Nord" },
  { value: "onedark", label: "OneDark" },
];
---

<div class="theme-toggle relative">
  <button
    id="theme-toggle-btn"
    class="flex items-center justify-center w-10 h-10 rounded-3xl bg-black text-gray-100 transition-all duration-150 border-2 border-gray-600 hover:bg-primary hover:-translate-y-0.5 p-3"
    title="Change theme"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="12" cy="12" r="5"></circle>
      <path
        d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
      ></path>
    </svg>
  </button>

  <div
    id="theme-dropdown"
    class="absolute right-0 bottom-12 mt-2 py-2 w-56 rounded-md border border-gray-600 bg-black shadow-lg hidden z-20"
  >
    {
      themes.map((theme) => (
        <button
          class={`theme-option block w-full text-left px-4 py-2 text-sm hover:bg-gray-700`}
          data-theme={theme.value}
        >
          <span class={`theme-dot theme-dot-${theme.value}`} />
          {theme.label}
        </button>
      ))
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle-btn");
    const themeDropdown = document.getElementById("theme-dropdown");
    const themeOptions = document.querySelectorAll(".theme-option");

    // Get current theme
    const getCurrentTheme = () => localStorage.getItem("theme") || "default";

    // Set theme
    const setTheme = (theme) => {
      document.documentElement.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);

      // Update active theme display
      themeOptions.forEach((option) => {
        option.classList.toggle(
          "bg-gray-700",
          option.getAttribute("data-theme") === theme,
        );
      });
    };

    // Initialize active theme
    setTheme(getCurrentTheme());

    // Show/hide theme dropdown
    themeToggle.addEventListener("click", () => {
      themeDropdown.classList.toggle("hidden");
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !themeToggle.contains(e.target) &&
        !themeDropdown.contains(e.target)
      ) {
        themeDropdown.classList.add("hidden");
      }
    });

    // Theme option selection
    themeOptions.forEach((option) => {
      option.addEventListener("click", () => {
        const newTheme = option.getAttribute("data-theme");
        setTheme(newTheme);
        themeDropdown.classList.add("hidden");
      });
    });
  });
</script>
