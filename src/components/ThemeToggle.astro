---
import { themes } from "../data/themes";
---

<div class="theme-toggle fixed bottom-4 right-4 z-50">
  <button
    id="theme-toggle-btn"
    class="theme-toggle-btn flex h-9 w-9 items-center justify-center rounded-3xl border-2 p-2 transition-all duration-150 hover:-translate-y-0.5 sm:h-10 sm:w-10 sm:p-3"
    title="Change theme"
    aria-label="Open theme selector"
    aria-expanded="false"
    aria-controls="theme-dropdown"
  >
    <span class="material-symbols-rounded icon-sm" aria-hidden="true"> palette </span>
  </button>

  <div
    id="theme-dropdown"
    class="theme-dropdown absolute bottom-14 right-0 z-20 mt-2 hidden w-48 rounded-md border py-2 text-xs shadow-2xl sm:w-56 sm:text-sm"
    role="menu"
    aria-labelledby="theme-toggle-btn"
  >
    <div
      class="mb-1 border-b border-[var(--border-color)] px-4 py-1 text-[10px] font-bold uppercase text-primary sm:text-xs"
    >
      Terminal Themes
    </div>
    {
      themes.map((theme) => (
        <button
          class="theme-option block flex w-full items-center px-3 py-1.5 text-left text-xs hover:bg-opacity-20 sm:px-4 sm:py-2 sm:text-sm"
          data-theme={theme.value}
          role="menuitem"
          aria-label={`Switch to ${theme.label} theme`}
        >
          <span class:list={`theme-dot theme-dot-${theme.value}`} aria-hidden="true" />
          {theme.label}
        </button>
      ))
    }
  </div>
</div>

<style>
  .theme-toggle-btn {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--border-color);
  }

  .theme-toggle-btn:hover {
    background-color: var(--accent-primary);
    color: var(--bg-primary);
    border-color: var(--accent-primary);
  }

  .theme-dropdown {
    background-color: var(--bg-primary);
    border-color: var(--border-color);
  }

  .theme-option:hover {
    background-color: var(--bg-secondary);
  }

  .theme-option.active {
    background-color: var(--bg-secondary);
    position: relative;
  }

  .theme-option.active::before {
    content: "âœ“";
    position: absolute;
    left: 0.5rem;
    color: var(--accent-primary);
    font-weight: bold;
  }

  /* Scrollbar styling for theme dropdown */
  .theme-dropdown::-webkit-scrollbar {
    width: 6px;
  }

  .theme-dropdown::-webkit-scrollbar-track {
    background: var(--bg-secondary);
    border-radius: 3px;
  }

  .theme-dropdown::-webkit-scrollbar-thumb {
    background-color: var(--border-color);
    border-radius: 3px;
  }

  @media (max-width: 767px) {
    .theme-toggle {
      bottom: 90px; /* Above mobile nav with proper spacing */
      right: 1rem;
      z-index: 40; /* Below mobile nav but above content */
    }
  }

  .theme-toggle-btn {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle-btn");
    const themeDropdown = document.getElementById("theme-dropdown");
    const themeOptions = document.querySelectorAll(".theme-option");

    // Get current theme
    const getCurrentTheme = (): string => localStorage.getItem("selectedTheme") || "green";

    // Set theme
    const setTheme = (theme: string): void => {
      document.documentElement.setAttribute("data-theme", theme);
      document.body.setAttribute("data-theme", theme);
      localStorage.setItem("selectedTheme", theme);

      // Update active theme display
      themeOptions.forEach((option) => {
        option.classList.toggle("active", option.getAttribute("data-theme") === theme);
      });
    };

    // Update active state display only (theme is already set by Layout.astro)
    const currentTheme = getCurrentTheme();
    themeOptions.forEach((option) => {
      option.classList.toggle("active", option.getAttribute("data-theme") === currentTheme);
    });

    // Show/hide theme dropdown - with null checks
    if (themeToggle && themeDropdown) {
      themeToggle.addEventListener("click", () => {
        const isHidden = themeDropdown.classList.toggle("hidden");
        themeToggle.setAttribute("aria-expanded", (!isHidden).toString());

        // Scroll to active theme in dropdown
        const activeTheme = getCurrentTheme();
        const activeOption = document.querySelector(`.theme-option[data-theme="${activeTheme}"]`);
        if (activeOption && !themeDropdown.classList.contains("hidden")) {
          setTimeout(() => {
            activeOption.scrollIntoView({
              block: "center",
              behavior: "smooth",
            });
          }, 100);
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        if (
          e.target instanceof Node &&
          themeToggle &&
          themeDropdown &&
          !themeToggle.contains(e.target) &&
          !themeDropdown.contains(e.target)
        ) {
          themeDropdown.classList.add("hidden");
          themeToggle.setAttribute("aria-expanded", "false");
        }
      });
    }

    // Theme option selection
    themeOptions.forEach((option) => {
      option.addEventListener("click", () => {
        const newTheme = option.getAttribute("data-theme");
        if (newTheme && themeDropdown) {
          setTheme(newTheme);
          themeDropdown.classList.add("hidden");
        }
      });
    });
  });
</script>
