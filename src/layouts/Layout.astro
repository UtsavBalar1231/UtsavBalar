---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";
import StatusLine from "../components/StatusLine.astro";
import MobileNav from "../components/MobileNav.astro";
import Nav from "../components/Nav.astro";
import SpinningCat from "../components/SpinningCat.astro";
import DoomFire from "../components/DoomFire.astro";
import MatrixRain from "../components/MatrixRain.astro";
import LightningStorm from "../components/LightningStorm.astro";
import SakuraFall from "../components/SakuraFall.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Utsav Balar's portfolio - Linux kernel developer, system programmer, and open source enthusiast"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="theme-color" content="#dbbc7f" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <script is:inline>
      // Theme initialization function
      function initializeTheme() {
        const theme = localStorage.getItem("selectedTheme") || "monochrome";
        document.documentElement.setAttribute("data-theme", theme);
        if (document.body) {
          document.body.setAttribute("data-theme", theme);
        }

        // Performance mode initialization
        const performanceStored = localStorage.getItem("performanceMode");
        const performanceMode =
          performanceStored !== null ? performanceStored === "true" : window.innerWidth < 768;

        if (document.body) {
          document.body.setAttribute("data-performance", performanceMode.toString());
        }
      }

      // Run on initial page load
      initializeTheme();

      // Re-run after ViewTransitions navigation
      document.addEventListener("astro:page-load", initializeTheme);
    </script>

    <link rel="dns-prefetch" href="https://utsavbalar.in" />
    <link rel="preconnect" href="https://utsavbalar.in" />

    <link rel="dns-prefetch" href="https://api.github.com" />
    <link rel="dns-prefetch" href="https://cataas.com" />
    <link rel="preconnect" href="https://api.github.com" crossorigin />
    <link rel="preconnect" href="https://cataas.com" crossorigin />

    <link
      rel="preload"
      href="/fonts/DepartureMono/DepartureMonoNerdFontMono-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <ViewTransitions />
  </head>
  <body>
    <div class="noise-overlay" style="z-index: var(--z-noise);" transition:persist="noise"></div>
    <div class="grunge-overlay" style="z-index: var(--z-grunge);" transition:persist="grunge"></div>
    <MatrixRain transition:persist="matrix" />
    <DoomFire transition:persist="fire" />
    <LightningStorm transition:persist="storm" />
    <SakuraFall transition:persist="sakura" />
    <div
      class="pt-18 page-content relative min-h-screen p-4 max-md:pb-20 sm:p-6 md:p-8"
      style="contain: layout style;"
      id="main-content"
      transition:animate="fade"
      transition:name="main"
    >
      <header class="mb-8">
        <Nav />
      </header>
      <slot />
    </div>
    <MobileNav transition:persist="mobile-nav" />
    <StatusLine transition:persist="status" />
    <SpinningCat transition:persist="cat" />
  </body>
</html>

<script>
  // ViewTransitions event handling for terminal effects
  document.addEventListener("astro:page-load", () => {
    const mainContent = document.getElementById("main-content");
    mainContent?.classList.add("page-content-loaded");
  });

  document.addEventListener("astro:before-preparation", () => {
    const mainContent = document.getElementById("main-content");
    mainContent?.classList.add("page-content-exiting");
  });

  document.addEventListener("astro:after-swap", () => {
    const mainContent = document.getElementById("main-content");
    mainContent?.classList.remove("page-content-exiting");
    mainContent?.classList.add("page-content-entering");
    setTimeout(() => {
      mainContent?.classList.remove("page-content-entering");
    }, 500);
  });

  // Alt+1-7 keyboard navigation with ViewTransitions
  document.addEventListener("keydown", (event) => {
    if (event.altKey) {
      let targetUrl = null;

      switch (event.key) {
        case "1":
          targetUrl = "/";
          break;
        case "2":
          targetUrl = "/about/";
          break;
        case "3":
          targetUrl = "/projects/";
          break;
        case "4":
          targetUrl = "/quotes/";
          break;
        case "5":
          targetUrl = "/bookbits/";
          break;
        case "6":
          targetUrl = "/resume/";
          break;
        case "7":
          targetUrl = "/tutorials/";
          break;
      }

      if (targetUrl && targetUrl !== window.location.pathname) {
        // Use standard navigation
        window.location.href = targetUrl;
      }
    }
  });

  // Lazy animations for desktop only
  document.addEventListener("DOMContentLoaded", () => {
    if (window.innerWidth >= 768) {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: "50px",
      };

      const animationObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate-in");
            animationObserver.unobserve(entry.target);
          }
        });
      }, observerOptions);

      document.querySelectorAll(".terminal-card, .content-section, .project-card").forEach((el) => {
        el.classList.add("animate-ready");
        animationObserver.observe(el);
      });
    }
  });
</script>

<style is:global>
  html {
    overscroll-behavior-y: contain;
    overscroll-behavior-x: none;
  }

  body {
    touch-action: pan-y;
    -webkit-overflow-scrolling: touch;
    overscroll-behavior: contain;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
  }
</style>
