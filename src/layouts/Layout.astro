---
import "../styles/global.scss";
import ThemeManager from "../components/ThemeManager.astro";

// Base domain URL without trailing slash
const domainBaseURL = "https://utsavbalar.in";
const ogImageUrl = "https://utsavbalar.in/img/meta.png";

// Website publisher & region
const authorPublisher = "Utsav Balar";
const geoRegion = "IN-GJ";

// SEO title, description and keywords
const seoTitle = "Utsav Balar | Embedded Linux & BSP Engineer";
const seoDescription =
  "Embedded Linux and BSP Engineer with expertise in Linux kernel development, device drivers, and custom ROM development for various hardware platforms.";
const seoKeywords =
  "Utsav Balar, Embedded Linux, BSP Engineer, Linux Kernel, Device Drivers, Custom ROM, Vicharak, Rockchip, Qualcomm";

// Twitter card data
const twitter = {
  title: seoTitle,
  description: seoDescription,
  image: ogImageUrl,
  site: "https://x.com/UtsavTheCunt",
  creator: "UtsavTheCunt",
};

// Open graph data
const openGraph = {
  title: seoTitle,
  description: seoDescription,
  url: domainBaseURL,
  image: ogImageUrl,
  type: "website",
  locale: "en_US",
  siteName: "Utsav Balar",
};

// Dublin core
const dublinCore = {
  title: "Utsav Balar",
  creator: authorPublisher,
  publisher: authorPublisher,
  rights: authorPublisher,
  description: seoDescription,
  language: "en",
  type: "Software",
  format: "text/html",
};

// Create an inline SVG favicon with theme-aware colors
const inlineFavicon = `
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
  <rect width="32" height="32" fill="transparent" />
  <text x="16" y="21" fill="currentColor" font-family="AdwaitaMono, monospace" font-size="14" font-weight="bold" text-anchor="middle">UB</text>
</svg>
`;

// Convert SVG to data URL for use as favicon
const faviconDataUrl = `data:image/svg+xml;base64,${Buffer.from(inlineFavicon).toString("base64")}`;
---

<!doctype html>
<html lang="en" class="font-mono">
  <head>
    <!-- Preload AdwaitaMono fonts -->
    <link
      rel="preload"
      href="/fonts/AdwaitaMono/AdwaitaMonoNerdFontMono-Regular.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/AdwaitaMono/AdwaitaMonoNerdFontMono-Bold.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />

    <!-- Google Material Symbols -->
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,0..200"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,0..200"
    />

    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css">
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>

    <!-- Initialize Prism.js -->
    <script is:inline>
      window.Prism = window.Prism || {};
      Prism.manual = true;
    </script>

    <!-- Crawler & Robots -->
    <meta
      name="robots"
      content="index, follow, noodp, max-image-preview:large, max-snippet:-1, max-video-preview:-1"
    />
    <meta name="revisit-after" content="7 days" />
    <meta name="revisit" content="after 7 days" />

    <!-- Start: Meta-Tags -->
    <meta charset="UTF-8" />
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta http-equiv="Pragma" content="cache" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- End: Meta-Tags -->

    <!-- Start: DNS prefetch and preconnect -->
    <link rel="prefetch" href="/img/default-avatar.svg" />
    <link rel="prefetch" href="/img/logo.svg" />
    <!-- End: DNS prefetch and preconnect -->

    <!-- Start: Theming and Favicons -->
    <link
      rel="icon"
      type="image/svg+xml"
      href="/img/logo.svg"
      crossorigin="anonymous"
    />
    <!-- End: Theming and Favicons -->

    <!-- Start: Misc meta tags -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={Astro.url} />

    <meta name="geo.region" content={geoRegion} />
    <meta name="author" content={authorPublisher} />
    <meta name="publisher" content={authorPublisher} />
    <meta name="copyright" content={authorPublisher} />
    <!-- End: Misc meta tags -->

    <!-- Start: Facebook open graph -->
    <meta property="og:title" content={openGraph.title} />
    <meta property="og:description" content={openGraph.description} />
    <meta property="og:url" content={openGraph.url} />
    <meta property="og:type" content={openGraph.type} />
    <meta property="og:image" content={openGraph.image} />
    <meta property="og:locale" content={openGraph.locale} />
    <meta property="og:site_name" content={openGraph.siteName} />
    <!-- End: Facebook open graph -->

    <!-- Start: Twitter card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={twitter.title} />
    <meta name="twitter:description" content={twitter.description} />
    <meta name="twitter:image" content={twitter.image} />
    <meta name="twitter:site" content={twitter.site} />
    <meta name="twitter:creator" content={twitter.creator} />
    <!-- End: Twitter card -->

    <!-- Start: Dublin Core (DC) -->
    <meta name="DC.Title" content={dublinCore.title} />
    <meta name="DC.Creator" content={dublinCore.creator} />
    <meta name="DC.Rights" content={dublinCore.rights} />
    <meta name="DC.Publisher" content={dublinCore.publisher} />
    <meta name="DC.Description" content={dublinCore.description} />
    <meta name="DC.Language" content={dublinCore.language} />
    <meta name="DC.Type" content={dublinCore.type} />
    <meta name="DC.Format" content={dublinCore.format} />
    <!-- End: Dublin Core (DC) -->

    <!-- Title & Description -->
    <title>{seoTitle}</title>
    <meta name="description" content={seoDescription} />
    <meta name="abstract" content={seoDescription} />
    <meta name="keywords" content={seoKeywords} />

    <!-- Dynamic favicon styles -->
    <style is:inline>
      @media (prefers-color-scheme: dark) {
        :root {
          color-scheme: dark;
        }
      }

      @media (prefers-color-scheme: light) {
        :root {
          color-scheme: light;
        }
      }
    </style>

    <!-- Include ThemeManager component -->
    <ThemeManager />
  </head>

  <body class="min-h-[100vh] flex items-center justify-center p-2 sm:p-4">
    <slot />

    <script>
      // Enhance smooth scrolling behavior with Vim keybindings
      document.addEventListener("DOMContentLoaded", () => {
        // Initialize Prism for any code blocks on the page
        if (typeof Prism !== "undefined" && Prism.highlightAll) {
          Prism.highlightAll();
        }

        // Track last G key press time for double-key commands
        let lastGKeyPress = 0;

        // Handle scrolling with arrow keys and Vim keybindings
        document.addEventListener("keydown", (e) => {
          // Skip if we're in an input or textarea
          if (isEditableElement(e.target as HTMLElement)) {
            return;
          }

          // Standard navigation keys
          if (
            [
              "ArrowDown",
              "ArrowUp",
              "PageDown",
              "PageUp",
              "Home",
              "End",
              "Space",
            ].includes(e.key)
          ) {
            const scrollableElements = document.querySelectorAll(
              '.no-scrollbar, [class*="overflow-"]',
            );

            scrollableElements.forEach((el) => {
              if (
                isElementInViewport(el as HTMLElement) &&
                isScrollable(el as HTMLElement)
              ) {
                // Let browser handle the scrolling with smooth behavior
                return;
              }
            });
          }

          // Find the active scrollable element
          const scrollableElements = Array.from(
            document.querySelectorAll('.no-scrollbar, [class*="overflow-"]'),
          ) as HTMLElement[];
          let activeElement: HTMLElement | null = null;

          // Find the first scrollable element that's in viewport
          for (const el of scrollableElements) {
            if (isElementInViewport(el) && isScrollable(el)) {
              activeElement = el;
              break;
            }
          }

          // If no element found, use the document for scrolling
          if (!activeElement) {
            activeElement = document.documentElement;
          }

          const scrollAmount = 60; // pixels to scroll for j/k

          // Vim keybindings
          switch (e.key.toLowerCase()) {
            case "j": // Scroll down
              e.preventDefault();
              activeElement.scrollBy({
                top: scrollAmount,
                behavior: "smooth",
              });
              break;

            case "k": // Scroll up
              e.preventDefault();
              activeElement.scrollBy({
                top: -scrollAmount,
                behavior: "smooth",
              });
              break;

            case "g": // For gg (top) command
              if (e.timeStamp - lastGKeyPress < 500) {
                // If double-g pressed
                e.preventDefault();
                activeElement.scrollTo({
                  top: 0,
                  behavior: "smooth",
                });
              } else {
                // Store timestamp for g key commands
                lastGKeyPress = e.timeStamp;

                // Add a small delay to check for t/T keypresses after g
                setTimeout(() => {
                  const currentTime = new Date().getTime();
                  // If no other key was pressed within 300ms after g, reset the timestamp
                  if (currentTime - lastGKeyPress >= 300) {
                    lastGKeyPress = 0;
                  }
                }, 300);
              }
              break;

            case "d": // For Ctrl+d (half page down)
              if (e.ctrlKey) {
                e.preventDefault();
                activeElement.scrollBy({
                  top: Math.floor(activeElement.clientHeight / 2),
                  behavior: "smooth",
                });
              }
              break;

            case "u": // For Ctrl+u (half page up)
              if (e.ctrlKey) {
                e.preventDefault();
                activeElement.scrollBy({
                  top: -Math.floor(activeElement.clientHeight / 2),
                  behavior: "smooth",
                });
              }
              break;

            case "t": // For gt (next tab)
              if (e.timeStamp - lastGKeyPress < 500) {
                e.preventDefault();
                navigateToNextTab();
                // Reset the g key timestamp to prevent double triggers
                lastGKeyPress = 0;
              }
              break;

            case "T": // For gT (previous tab)
              if (e.timeStamp - lastGKeyPress < 500) {
                e.preventDefault();
                navigateToPreviousTab();
                // Reset the g key timestamp to prevent double triggers
                lastGKeyPress = 0;
              }
              break;
          }

          // G key for scrolling to bottom
          if (e.key === "G") {
            e.preventDefault();
            activeElement.scrollTo({
              top: activeElement.scrollHeight,
              behavior: "smooth",
            });
          }
        });

        // Navigate to next tab
        function navigateToNextTab() {
          const tabRadios = document.querySelectorAll(
            ".tab-radio",
          ) as NodeListOf<HTMLInputElement>;
          if (tabRadios.length <= 1) return;

          let currentIndex = -1;
          for (let i = 0; i < tabRadios.length; i++) {
            if (tabRadios[i].checked) {
              currentIndex = i;
              break;
            }
          }

          const nextIndex = (currentIndex + 1) % tabRadios.length;
          tabRadios[nextIndex].checked = true;
          tabRadios[nextIndex].dispatchEvent(new Event("change"));

          // Log for debugging
          console.log(`Navigated to tab ${nextIndex + 1}`);
        }

        // Navigate to previous tab
        function navigateToPreviousTab() {
          const tabRadios = document.querySelectorAll(
            ".tab-radio",
          ) as NodeListOf<HTMLInputElement>;
          if (tabRadios.length <= 1) return;

          let currentIndex = -1;
          for (let i = 0; i < tabRadios.length; i++) {
            if (tabRadios[i].checked) {
              currentIndex = i;
              break;
            }
          }

          const prevIndex =
            (currentIndex - 1 + tabRadios.length) % tabRadios.length;
          tabRadios[prevIndex].checked = true;
          tabRadios[prevIndex].dispatchEvent(new Event("change"));

          // Log for debugging
          console.log(`Navigated to tab ${prevIndex + 1}`);
        }

        // Helper function to check if element is in viewport
        function isElementInViewport(el: HTMLElement): boolean {
          const rect = el.getBoundingClientRect();
          return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <=
              (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <=
              (window.innerWidth || document.documentElement.clientWidth)
          );
        }

        // Helper function to check if element is scrollable
        function isScrollable(el: HTMLElement): boolean {
          return el.scrollHeight > el.clientHeight;
        }

        // Helper function to check if element is editable
        function isEditableElement(el: HTMLElement): boolean {
          if (!el) return false;

          const tagName = el.tagName.toLowerCase();

          // Check for input/textarea elements
          if (["input", "textarea", "select"].includes(tagName)) {
            return true;
          }

          // Check for contenteditable elements
          if (
            el.hasAttribute("contenteditable") &&
            el.getAttribute("contenteditable") !== "false"
          ) {
            return true;
          }

          // Check if inside a form element
          if (el.closest("form")) {
            return true;
          }

          return false;
        }
      });
    </script>
  </body>
</html>

<style is:global>
  /* Prevent overscroll/bounce effect on the whole document */
  html,
  body {
    overscroll-behavior: none;
    scroll-behavior: smooth; /* Enable smooth scrolling */
  }

  /* Font face declarations */
  @font-face {
    font-family: "AdwaitaMono";
    src: url("/fonts/AdwaitaMono/AdwaitaMonoNerdFontMono-Regular.ttf");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "AdwaitaMono";
    src: url("/fonts/AdwaitaMono/AdwaitaMonoNerdFontMono-Bold.ttf");
    font-weight: bold;
    font-style: normal;
    font-display: swap;
  }
</style>
